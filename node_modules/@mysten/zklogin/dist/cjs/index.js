"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  computeZkLoginAddress: () => computeZkLoginAddress,
  genAddressSeed: () => import_zklogin3.genAddressSeed,
  generateNonce: () => import_zklogin3.generateNonce,
  generateRandomness: () => import_zklogin3.generateRandomness,
  getExtendedEphemeralPublicKey: () => import_zklogin3.getExtendedEphemeralPublicKey,
  getZkLoginSignature: () => import_zklogin3.getZkLoginSignature,
  hashASCIIStrToField: () => import_zklogin3.hashASCIIStrToField,
  jwtToAddress: () => jwtToAddress,
  poseidonHash: () => import_zklogin3.poseidonHash
});
module.exports = __toCommonJS(src_exports);
var import_zklogin = require("@mysten/sui/zklogin");
var import_zklogin2 = require("@mysten/sui/zklogin");
var import_zklogin3 = require("@mysten/sui/zklogin");
function computeZkLoginAddress(options) {
  return (0, import_zklogin2.computeZkLoginAddress)({
    ...options,
    legacyAddress: true
  });
}
function jwtToAddress(jwt, userSalt, legacyAddress = true) {
  return (0, import_zklogin2.jwtToAddress)(jwt, userSalt, legacyAddress);
}
//# sourceMappingURL=index.js.map
