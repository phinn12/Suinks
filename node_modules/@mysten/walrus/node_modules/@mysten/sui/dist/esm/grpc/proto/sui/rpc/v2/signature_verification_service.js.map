{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature_verification_service.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature_verification_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { ServiceType } from \"@protobuf-ts/runtime-rpc\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ActiveJwk } from \"./transaction\";\nimport { UserSignature } from \"./signature\";\nimport { Bcs } from \"./bcs\";\n/**\n * @generated from protobuf message sui.rpc.v2.VerifySignatureRequest\n */\nexport interface VerifySignatureRequest {\n    /**\n     * The message to verify against.\n     *\n     * Today the only supported message types are `PersonalMessage` and\n     * `TransactionData` and the `Bcs.name` must be set to indicate which type of\n     * message is being verified.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Bcs message = 1;\n     */\n    message?: Bcs;\n    /**\n     * The signature to verify.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.UserSignature signature = 2;\n     */\n    signature?: UserSignature;\n    /**\n     * Optional. Address to validate against the provided signature.\n     *\n     * If provided, this address will be compared against the the address derived\n     * from the provide signature and a successful response will only be returned\n     * if they match.\n     *\n     * @generated from protobuf field: optional string address = 3;\n     */\n    address?: string;\n    /**\n     * The set of JWKs to use when verifying Zklogin signatures.\n     * If this is empty the current set of valid JWKs stored onchain will be used\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ActiveJwk jwks = 4;\n     */\n    jwks: ActiveJwk[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2.VerifySignatureResponse\n */\nexport interface VerifySignatureResponse {\n    /**\n     * Indicates if the provided signature was valid given the requested parameters.\n     *\n     * @generated from protobuf field: optional bool is_valid = 1;\n     */\n    isValid?: boolean;\n    /**\n     * If `is_valid` is `false`, this is the reason for why the signature verification failed.\n     *\n     * @generated from protobuf field: optional string reason = 2;\n     */\n    reason?: string;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureRequest$Type extends MessageType<VerifySignatureRequest> {\n    constructor() {\n        super(\"sui.rpc.v2.VerifySignatureRequest\", [\n            { no: 1, name: \"message\", kind: \"message\", T: () => Bcs },\n            { no: 2, name: \"signature\", kind: \"message\", T: () => UserSignature },\n            { no: 3, name: \"address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"jwks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActiveJwk }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.VerifySignatureRequest\n */\nexport const VerifySignatureRequest = new VerifySignatureRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VerifySignatureResponse$Type extends MessageType<VerifySignatureResponse> {\n    constructor() {\n        super(\"sui.rpc.v2.VerifySignatureResponse\", [\n            { no: 1, name: \"is_valid\", kind: \"scalar\", opt: true, T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"reason\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.VerifySignatureResponse\n */\nexport const VerifySignatureResponse = new VerifySignatureResponse$Type();\n/**\n * @generated ServiceType for protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport const SignatureVerificationService = new ServiceType(\"sui.rpc.v2.SignatureVerificationService\", [\n    { name: \"VerifySignature\", options: {}, I: VerifySignatureRequest, O: VerifySignatureResponse }\n]);\n"],
  "mappings": "AAWA,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,qBAAqB;AAC9B,SAAS,WAAW;AAyDpB,MAAM,oCAAoC,YAAoC;AAAA,EAC1E,cAAc;AACV,UAAM,qCAAqC;AAAA,MACvC,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,IAAI;AAAA,MACxD,EAAE,IAAI,GAAG,MAAM,aAAa,MAAM,WAAW,GAAG,MAAM,cAAc;AAAA,MACpE;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAChF,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,WAAW,QAAQ,GAAyB,GAAG,MAAM,UAAU;AAAA,IAChG,CAAC;AAAA,EACL;AACJ;AAIO,MAAM,yBAAyB,IAAI,4BAA4B;AAEtE,MAAM,qCAAqC,YAAqC;AAAA,EAC5E,cAAc;AACV,UAAM,sCAAsC;AAAA,MACxC;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAY,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAsB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,IACnF,CAAC;AAAA,EACL;AACJ;AAIO,MAAM,0BAA0B,IAAI,6BAA6B;AAIjE,MAAM,+BAA+B,IAAI,YAAY,2CAA2C;AAAA,EACnG,EAAE,MAAM,mBAAmB,SAAS,CAAC,GAAG,GAAG,wBAAwB,GAAG,wBAAwB;AAClG,CAAC;",
  "names": []
}
