{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/system_state.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/system_state.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message sui.rpc.v2.SystemState\n */\nexport interface SystemState {\n    /**\n     * The version of the system state data structure type.\n     *\n     * @generated from protobuf field: optional uint64 version = 1;\n     */\n    version?: bigint;\n    /**\n     * The epoch id\n     *\n     * @generated from protobuf field: optional uint64 epoch = 2;\n     */\n    epoch?: bigint;\n    /**\n     * The protocol version\n     *\n     * @generated from protobuf field: optional uint64 protocol_version = 3;\n     */\n    protocolVersion?: bigint;\n    /**\n     * Information about the validators\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ValidatorSet validators = 4;\n     */\n    validators?: ValidatorSet;\n    /**\n     * Storage Fund info\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.StorageFund storage_fund = 5;\n     */\n    storageFund?: StorageFund;\n    /**\n     * Set of system config parameters\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SystemParameters parameters = 6;\n     */\n    parameters?: SystemParameters;\n    /**\n     * The reference gas price for this epoch\n     *\n     * @generated from protobuf field: optional uint64 reference_gas_price = 7;\n     */\n    referenceGasPrice?: bigint;\n    /**\n     * A list of the records of validator reporting each other.\n     *\n     * There is an entry in this list for each validator that has been reported\n     * at least once. Each record contains all the validators that reported\n     * them. If a validator has never been reported they don't have a record in this list.\n     * This lists persists across epoch: a peer continues being in a reported state until the\n     * reporter doesn't explicitly remove their report.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ValidatorReportRecord validator_report_records = 8;\n     */\n    validatorReportRecords: ValidatorReportRecord[];\n    /**\n     * Schedule of stake subsidies given out each epoch.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.StakeSubsidy stake_subsidy = 9;\n     */\n    stakeSubsidy?: StakeSubsidy;\n    /**\n     * Whether the system is running in a downgraded safe mode due to a non-recoverable bug.\n     * This is set whenever we failed to execute advance_epoch, and ended up executing advance_epoch_safe_mode.\n     * It can be reset once we are able to successfully execute advance_epoch.\n     * The rest of the fields starting with `safe_mode_` are accumulated during safe mode\n     * when advance_epoch_safe_mode is executed. They will eventually be processed once we\n     * are out of safe mode.\n     *\n     * @generated from protobuf field: optional bool safe_mode = 10;\n     */\n    safeMode?: boolean;\n    /**\n     * Storage rewards accumulated during safe_mode\n     *\n     * @generated from protobuf field: optional uint64 safe_mode_storage_rewards = 11;\n     */\n    safeModeStorageRewards?: bigint;\n    /**\n     * Computation rewards accumulated during safe_mode\n     *\n     * @generated from protobuf field: optional uint64 safe_mode_computation_rewards = 12;\n     */\n    safeModeComputationRewards?: bigint;\n    /**\n     * Storage rebates paid out during safe_mode\n     *\n     * @generated from protobuf field: optional uint64 safe_mode_storage_rebates = 13;\n     */\n    safeModeStorageRebates?: bigint;\n    /**\n     * Nonrefundable storage fees accumulated during safe_mode\n     *\n     * @generated from protobuf field: optional uint64 safe_mode_non_refundable_storage_fee = 14;\n     */\n    safeModeNonRefundableStorageFee?: bigint;\n    /**\n     * Unix timestamp of when this this epoch started\n     *\n     * @generated from protobuf field: optional uint64 epoch_start_timestamp_ms = 15;\n     */\n    epochStartTimestampMs?: bigint;\n    /**\n     * Any extra fields that's not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 16;\n     */\n    extraFields?: MoveTable;\n}\n/**\n * @generated from protobuf message sui.rpc.v2.ValidatorReportRecord\n */\nexport interface ValidatorReportRecord {\n    /**\n     * The address of the validator being reported\n     *\n     * @generated from protobuf field: optional string reported = 1;\n     */\n    reported?: string;\n    /**\n     * The list of validator (addresses) that are reporting on the validator specified by `reported`\n     *\n     * @generated from protobuf field: repeated string reporters = 2;\n     */\n    reporters: string[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2.SystemParameters\n */\nexport interface SystemParameters {\n    /**\n     * The duration of an epoch, in milliseconds.\n     *\n     * @generated from protobuf field: optional uint64 epoch_duration_ms = 1;\n     */\n    epochDurationMs?: bigint;\n    /**\n     * The starting epoch in which stake subsidies start being paid out\n     *\n     * @generated from protobuf field: optional uint64 stake_subsidy_start_epoch = 2;\n     */\n    stakeSubsidyStartEpoch?: bigint;\n    /**\n     * Minimum number of active validators at any moment.\n     *\n     * @generated from protobuf field: optional uint64 min_validator_count = 3;\n     */\n    minValidatorCount?: bigint;\n    /**\n     * Maximum number of active validators at any moment.\n     * We do not allow the number of validators in any epoch to go above this.\n     *\n     * @generated from protobuf field: optional uint64 max_validator_count = 4;\n     */\n    maxValidatorCount?: bigint;\n    /**\n     * Deprecated.\n     * Lower-bound on the amount of stake required to become a validator.\n     *\n     * @generated from protobuf field: optional uint64 min_validator_joining_stake = 5;\n     */\n    minValidatorJoiningStake?: bigint;\n    /**\n     * Deprecated.\n     * Validators with stake amount below `validator_low_stake_threshold` are considered to\n     * have low stake and will be escorted out of the validator set after being below this\n     * threshold for more than `validator_low_stake_grace_period` number of epochs.\n     *\n     * @generated from protobuf field: optional uint64 validator_low_stake_threshold = 6;\n     */\n    validatorLowStakeThreshold?: bigint;\n    /**\n     * Deprecated.\n     * Validators with stake below `validator_very_low_stake_threshold` will be removed\n     * immediately at epoch change, no grace period.\n     *\n     * @generated from protobuf field: optional uint64 validator_very_low_stake_threshold = 7;\n     */\n    validatorVeryLowStakeThreshold?: bigint;\n    /**\n     * A validator can have stake below `validator_low_stake_threshold`\n     * for this many epochs before being kicked out.\n     *\n     * @generated from protobuf field: optional uint64 validator_low_stake_grace_period = 8;\n     */\n    validatorLowStakeGracePeriod?: bigint;\n    /**\n     * Any extra fields that are not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 9;\n     */\n    extraFields?: MoveTable;\n}\n/**\n * A message that represents a Move `0x2::table::Table` or `0x2::bag::Bag`\n *\n * @generated from protobuf message sui.rpc.v2.MoveTable\n */\nexport interface MoveTable {\n    /**\n     * The UID of the table or bag\n     *\n     * @generated from protobuf field: optional string id = 1;\n     */\n    id?: string;\n    /**\n     * The size or number of key-value pairs in the table or bag\n     *\n     * @generated from protobuf field: optional uint64 size = 2;\n     */\n    size?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2.StakeSubsidy\n */\nexport interface StakeSubsidy {\n    /**\n     * Balance of SUI set aside for stake subsidies that will be drawn down over time.\n     *\n     * @generated from protobuf field: optional uint64 balance = 1;\n     */\n    balance?: bigint;\n    /**\n     * Count of the number of times stake subsidies have been distributed.\n     *\n     * @generated from protobuf field: optional uint64 distribution_counter = 2;\n     */\n    distributionCounter?: bigint;\n    /**\n     * The amount of stake subsidy to be drawn down per distribution.\n     * This amount decays and decreases over time.\n     *\n     * @generated from protobuf field: optional uint64 current_distribution_amount = 3;\n     */\n    currentDistributionAmount?: bigint;\n    /**\n     * Number of distributions to occur before the distribution amount decays.\n     *\n     * @generated from protobuf field: optional uint64 stake_subsidy_period_length = 4;\n     */\n    stakeSubsidyPeriodLength?: bigint;\n    /**\n     * The rate at which the distribution amount decays at the end of each\n     * period. Expressed in basis points.\n     *\n     * @generated from protobuf field: optional uint32 stake_subsidy_decrease_rate = 5;\n     */\n    stakeSubsidyDecreaseRate?: number;\n    /**\n     * Any extra fields that's not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 6;\n     */\n    extraFields?: MoveTable;\n}\n/**\n * Struct representing the onchain storage fund.\n *\n * @generated from protobuf message sui.rpc.v2.StorageFund\n */\nexport interface StorageFund {\n    /**\n     * This is the sum of `storage_rebate` of\n     * all objects currently stored on-chain. To maintain this invariant, the only inflow of this\n     * balance is storage charges collected from transactions, and the only outflow is storage rebates\n     * of transactions, including both the portion refunded to the transaction senders as well as\n     * the non-refundable portion taken out and put into `non_refundable_balance`.\n     *\n     * @generated from protobuf field: optional uint64 total_object_storage_rebates = 1;\n     */\n    totalObjectStorageRebates?: bigint;\n    /**\n     * Represents any remaining inflow of the storage fund that should not\n     * be taken out of the fund.\n     *\n     * @generated from protobuf field: optional uint64 non_refundable_balance = 2;\n     */\n    nonRefundableBalance?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2.ValidatorSet\n */\nexport interface ValidatorSet {\n    /**\n     * Total amount of stake from all active validators at the beginning of the epoch.\n     * Written only once per epoch, in `advance_epoch` function.\n     *\n     * @generated from protobuf field: optional uint64 total_stake = 1;\n     */\n    totalStake?: bigint;\n    /**\n     * The current list of active validators.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Validator active_validators = 2;\n     */\n    activeValidators: Validator[];\n    /**\n     * List of new validator candidates added during the current epoch.\n     * They will be processed at the end of the epoch.\n     *\n     * key: u64 (index), value: 0x3::validator::Validator\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable pending_active_validators = 3;\n     */\n    pendingActiveValidators?: MoveTable;\n    /**\n     * Removal requests from the validators. Each element is an index\n     * pointing to `active_validators`.\n     *\n     * @generated from protobuf field: repeated uint64 pending_removals = 4;\n     */\n    pendingRemovals: bigint[];\n    /**\n     * Mappings from staking pool's ID to the sui address of a validator.\n     *\n     * key: address (staking pool Id), value: address (sui address of the validator)\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable staking_pool_mappings = 5;\n     */\n    stakingPoolMappings?: MoveTable;\n    /**\n     * Mapping from a staking pool ID to the inactive validator that has that pool as its staking pool.\n     * When a validator is deactivated the validator is removed from `active_validators` it\n     * is added to this table so that stakers can continue to withdraw their stake from it.\n     *\n     * key: address (staking pool Id), value: 0x3::validator_wrapper::ValidatorWrapper\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable inactive_validators = 6;\n     */\n    inactiveValidators?: MoveTable;\n    /**\n     * Table storing preactive/candidate validators, mapping their addresses to their `Validator ` structs.\n     * When an address calls `request_add_validator_candidate`, they get added to this table and become a preactive\n     * validator.\n     * When the candidate has met the min stake requirement, they can call `request_add_validator` to\n     * officially add them to the active validator set `active_validators` next epoch.\n     *\n     * key: address (sui address of the validator), value: 0x3::validator_wrapper::ValidatorWrapper\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable validator_candidates = 7;\n     */\n    validatorCandidates?: MoveTable;\n    /**\n     * Table storing the number of epochs during which a validator's stake has been below the low stake threshold.\n     *\n     * @generated from protobuf field: map<string, uint64> at_risk_validators = 8;\n     */\n    atRiskValidators: {\n        [key: string]: bigint;\n    };\n    /**\n     * Any extra fields that's not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 9;\n     */\n    extraFields?: MoveTable;\n}\n/**\n * Definition of a Validator in the system contracts\n *\n * Note: fields of ValidatorMetadata are flattened into this type\n *\n * @generated from protobuf message sui.rpc.v2.Validator\n */\nexport interface Validator {\n    /**\n     * A unique human-readable name of this validator.\n     *\n     * @generated from protobuf field: optional string name = 1;\n     */\n    name?: string;\n    /**\n     * The Sui Address of the validator. This is the sender that created the Validator object,\n     * and also the address to send validator/coins to during withdraws.\n     *\n     * @generated from protobuf field: optional string address = 2;\n     */\n    address?: string;\n    /**\n     * @generated from protobuf field: optional string description = 3;\n     */\n    description?: string;\n    /**\n     * @generated from protobuf field: optional string image_url = 4;\n     */\n    imageUrl?: string;\n    /**\n     * @generated from protobuf field: optional string project_url = 5;\n     */\n    projectUrl?: string;\n    /**\n     * The public key bytes corresponding to the private key that the validator\n     * holds to sign transactions. For now, this is the same as AuthorityName.\n     *\n     * @generated from protobuf field: optional bytes protocol_public_key = 7;\n     */\n    protocolPublicKey?: Uint8Array;\n    /**\n     * This is a proof that the validator has ownership of the protocol private key\n     *\n     * @generated from protobuf field: optional bytes proof_of_possession = 8;\n     */\n    proofOfPossession?: Uint8Array;\n    /**\n     * The public key bytes corresponding to the private key that the validator\n     * uses to establish TLS connections\n     *\n     * @generated from protobuf field: optional bytes network_public_key = 10;\n     */\n    networkPublicKey?: Uint8Array;\n    /**\n     * The public key bytes corresponding to the Narwhal Worker\n     *\n     * @generated from protobuf field: optional bytes worker_public_key = 12;\n     */\n    workerPublicKey?: Uint8Array;\n    /**\n     * The network address of the validator (could also contain extra info such as port, DNS and etc.).\n     *\n     * @generated from protobuf field: optional string network_address = 13;\n     */\n    networkAddress?: string;\n    /**\n     * The address of the validator used for p2p activities such as state sync (could also contain extra info such as port, DNS and etc.).\n     *\n     * @generated from protobuf field: optional string p2p_address = 14 [json_name = \"p2pAddress\"];\n     */\n    p2PAddress?: string;\n    /**\n     * The address of the narwhal primary\n     *\n     * @generated from protobuf field: optional string primary_address = 15;\n     */\n    primaryAddress?: string;\n    /**\n     * The address of the narwhal worker\n     *\n     * @generated from protobuf field: optional string worker_address = 16;\n     */\n    workerAddress?: string;\n    /**\n     * @generated from protobuf field: optional bytes next_epoch_protocol_public_key = 18;\n     */\n    nextEpochProtocolPublicKey?: Uint8Array;\n    /**\n     * @generated from protobuf field: optional bytes next_epoch_proof_of_possession = 19;\n     */\n    nextEpochProofOfPossession?: Uint8Array;\n    /**\n     * @generated from protobuf field: optional bytes next_epoch_network_public_key = 21;\n     */\n    nextEpochNetworkPublicKey?: Uint8Array;\n    /**\n     * @generated from protobuf field: optional bytes next_epoch_worker_public_key = 23;\n     */\n    nextEpochWorkerPublicKey?: Uint8Array;\n    /**\n     * @generated from protobuf field: optional string next_epoch_network_address = 24;\n     */\n    nextEpochNetworkAddress?: string;\n    /**\n     * @generated from protobuf field: optional string next_epoch_p2p_address = 25 [json_name = \"nextEpochP2pAddress\"];\n     */\n    nextEpochP2PAddress?: string;\n    /**\n     * @generated from protobuf field: optional string next_epoch_primary_address = 26;\n     */\n    nextEpochPrimaryAddress?: string;\n    /**\n     * @generated from protobuf field: optional string next_epoch_worker_address = 27;\n     */\n    nextEpochWorkerAddress?: string;\n    /**\n     * Any extra fields that's not defined statically in the `ValidatorMetadata` struct\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable metadata_extra_fields = 28;\n     */\n    metadataExtraFields?: MoveTable;\n    /**\n     * The voting power of this validator, which might be different from its\n     * stake amount.\n     *\n     * @generated from protobuf field: optional uint64 voting_power = 29;\n     */\n    votingPower?: bigint;\n    /**\n     * The ID of this validator's current valid `UnverifiedValidatorOperationCap`\n     *\n     * @generated from protobuf field: optional string operation_cap_id = 30;\n     */\n    operationCapId?: string;\n    /**\n     * Gas price quote, updated only at end of epoch.\n     *\n     * @generated from protobuf field: optional uint64 gas_price = 31;\n     */\n    gasPrice?: bigint;\n    /**\n     * Staking pool for this validator.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.StakingPool staking_pool = 32;\n     */\n    stakingPool?: StakingPool;\n    /**\n     * Commission rate of the validator, in basis point.\n     *\n     * @generated from protobuf field: optional uint64 commission_rate = 33;\n     */\n    commissionRate?: bigint;\n    /**\n     * Total amount of stake that would be active in the next epoch.\n     *\n     * @generated from protobuf field: optional uint64 next_epoch_stake = 34;\n     */\n    nextEpochStake?: bigint;\n    /**\n     * This validator's gas price quote for the next epoch.\n     *\n     * @generated from protobuf field: optional uint64 next_epoch_gas_price = 35;\n     */\n    nextEpochGasPrice?: bigint;\n    /**\n     * The commission rate of the validator starting the next epoch, in basis point.\n     *\n     * @generated from protobuf field: optional uint64 next_epoch_commission_rate = 36;\n     */\n    nextEpochCommissionRate?: bigint;\n    /**\n     * Any extra fields that's not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 37;\n     */\n    extraFields?: MoveTable;\n}\n/**\n * A staking pool embedded in each validator struct in the system state object.\n *\n * @generated from protobuf message sui.rpc.v2.StakingPool\n */\nexport interface StakingPool {\n    /**\n     * UID of the StakingPool object\n     *\n     * @generated from protobuf field: optional string id = 1;\n     */\n    id?: string;\n    /**\n     * The epoch at which this pool became active.\n     * The value is `None` if the pool is pre-active and `Some(<epoch_number>)` if active or inactive.\n     *\n     * @generated from protobuf field: optional uint64 activation_epoch = 2;\n     */\n    activationEpoch?: bigint;\n    /**\n     * The epoch at which this staking pool ceased to be active. `None` = {pre-active, active},\n     * `Some(<epoch_number>)` if in-active, and it was de-activated at epoch `<epoch_number>`.\n     *\n     * @generated from protobuf field: optional uint64 deactivation_epoch = 3;\n     */\n    deactivationEpoch?: bigint;\n    /**\n     * The total number of SUI tokens in this pool, including the SUI in the rewards_pool, as well as in all the principal\n     * in the `StakedSui` object, updated at epoch boundaries.\n     *\n     * @generated from protobuf field: optional uint64 sui_balance = 4;\n     */\n    suiBalance?: bigint;\n    /**\n     * The epoch stake rewards will be added here at the end of each epoch.\n     *\n     * @generated from protobuf field: optional uint64 rewards_pool = 5;\n     */\n    rewardsPool?: bigint;\n    /**\n     * Total number of pool tokens issued by the pool.\n     *\n     * @generated from protobuf field: optional uint64 pool_token_balance = 6;\n     */\n    poolTokenBalance?: bigint;\n    /**\n     * Exchange rate history of previous epochs.\n     *\n     * The entries start from the `activation_epoch` of this pool and contains exchange rates at the beginning of each epoch,\n     * i.e., right after the rewards for the previous epoch have been deposited into the pool.\n     *\n     * key: u64 (epoch number), value: PoolTokenExchangeRate\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable exchange_rates = 7;\n     */\n    exchangeRates?: MoveTable;\n    /**\n     * Pending stake amount for this epoch, emptied at epoch boundaries.\n     *\n     * @generated from protobuf field: optional uint64 pending_stake = 8;\n     */\n    pendingStake?: bigint;\n    /**\n     * Pending stake withdrawn during the current epoch, emptied at epoch boundaries.\n     * This includes both the principal and rewards SUI withdrawn.\n     *\n     * @generated from protobuf field: optional uint64 pending_total_sui_withdraw = 9;\n     */\n    pendingTotalSuiWithdraw?: bigint;\n    /**\n     * Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.\n     *\n     * @generated from protobuf field: optional uint64 pending_pool_token_withdraw = 10;\n     */\n    pendingPoolTokenWithdraw?: bigint;\n    /**\n     * Any extra fields that's not defined statically.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MoveTable extra_fields = 11;\n     */\n    extraFields?: MoveTable;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemState$Type extends MessageType<SystemState> {\n    constructor() {\n        super(\"sui.rpc.v2.SystemState\", [\n            { no: 1, name: \"version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"protocol_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"validators\", kind: \"message\", T: () => ValidatorSet },\n            { no: 5, name: \"storage_fund\", kind: \"message\", T: () => StorageFund },\n            { no: 6, name: \"parameters\", kind: \"message\", T: () => SystemParameters },\n            { no: 7, name: \"reference_gas_price\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"validator_report_records\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorReportRecord },\n            { no: 9, name: \"stake_subsidy\", kind: \"message\", T: () => StakeSubsidy },\n            { no: 10, name: \"safe_mode\", kind: \"scalar\", opt: true, T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"safe_mode_storage_rewards\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 12, name: \"safe_mode_computation_rewards\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 13, name: \"safe_mode_storage_rebates\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 14, name: \"safe_mode_non_refundable_storage_fee\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 15, name: \"epoch_start_timestamp_ms\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 16, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SystemState\n */\nexport const SystemState = new SystemState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorReportRecord$Type extends MessageType<ValidatorReportRecord> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorReportRecord\", [\n            { no: 1, name: \"reported\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"reporters\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorReportRecord\n */\nexport const ValidatorReportRecord = new ValidatorReportRecord$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemParameters$Type extends MessageType<SystemParameters> {\n    constructor() {\n        super(\"sui.rpc.v2.SystemParameters\", [\n            { no: 1, name: \"epoch_duration_ms\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"stake_subsidy_start_epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"min_validator_count\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"max_validator_count\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"min_validator_joining_stake\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"validator_low_stake_threshold\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 7, name: \"validator_very_low_stake_threshold\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"validator_low_stake_grace_period\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 9, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SystemParameters\n */\nexport const SystemParameters = new SystemParameters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveTable$Type extends MessageType<MoveTable> {\n    constructor() {\n        super(\"sui.rpc.v2.MoveTable\", [\n            { no: 1, name: \"id\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"size\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MoveTable\n */\nexport const MoveTable = new MoveTable$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakeSubsidy$Type extends MessageType<StakeSubsidy> {\n    constructor() {\n        super(\"sui.rpc.v2.StakeSubsidy\", [\n            { no: 1, name: \"balance\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"distribution_counter\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"current_distribution_amount\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"stake_subsidy_period_length\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"stake_subsidy_decrease_rate\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ },\n            { no: 6, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.StakeSubsidy\n */\nexport const StakeSubsidy = new StakeSubsidy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StorageFund$Type extends MessageType<StorageFund> {\n    constructor() {\n        super(\"sui.rpc.v2.StorageFund\", [\n            { no: 1, name: \"total_object_storage_rebates\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"non_refundable_balance\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.StorageFund\n */\nexport const StorageFund = new StorageFund$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorSet$Type extends MessageType<ValidatorSet> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorSet\", [\n            { no: 1, name: \"total_stake\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"active_validators\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator },\n            { no: 3, name: \"pending_active_validators\", kind: \"message\", T: () => MoveTable },\n            { no: 4, name: \"pending_removals\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"staking_pool_mappings\", kind: \"message\", T: () => MoveTable },\n            { no: 6, name: \"inactive_validators\", kind: \"message\", T: () => MoveTable },\n            { no: 7, name: \"validator_candidates\", kind: \"message\", T: () => MoveTable },\n            { no: 8, name: \"at_risk_validators\", kind: \"map\", K: 9 /*ScalarType.STRING*/, V: { kind: \"scalar\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ } },\n            { no: 9, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorSet\n */\nexport const ValidatorSet = new ValidatorSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Validator$Type extends MessageType<Validator> {\n    constructor() {\n        super(\"sui.rpc.v2.Validator\", [\n            { no: 1, name: \"name\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"description\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"image_url\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"project_url\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 7, name: \"protocol_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 8, name: \"proof_of_possession\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 10, name: \"network_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 12, name: \"worker_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 13, name: \"network_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 14, name: \"p2p_address\", kind: \"scalar\", jsonName: \"p2pAddress\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 15, name: \"primary_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 16, name: \"worker_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 18, name: \"next_epoch_protocol_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 19, name: \"next_epoch_proof_of_possession\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 21, name: \"next_epoch_network_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 23, name: \"next_epoch_worker_public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 24, name: \"next_epoch_network_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 25, name: \"next_epoch_p2p_address\", kind: \"scalar\", jsonName: \"nextEpochP2pAddress\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 26, name: \"next_epoch_primary_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 27, name: \"next_epoch_worker_address\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 28, name: \"metadata_extra_fields\", kind: \"message\", T: () => MoveTable },\n            { no: 29, name: \"voting_power\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 30, name: \"operation_cap_id\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 31, name: \"gas_price\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 32, name: \"staking_pool\", kind: \"message\", T: () => StakingPool },\n            { no: 33, name: \"commission_rate\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 34, name: \"next_epoch_stake\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 35, name: \"next_epoch_gas_price\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 36, name: \"next_epoch_commission_rate\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 37, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Validator\n */\nexport const Validator = new Validator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StakingPool$Type extends MessageType<StakingPool> {\n    constructor() {\n        super(\"sui.rpc.v2.StakingPool\", [\n            { no: 1, name: \"id\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"activation_epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"deactivation_epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"sui_balance\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"rewards_pool\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"pool_token_balance\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 7, name: \"exchange_rates\", kind: \"message\", T: () => MoveTable },\n            { no: 8, name: \"pending_stake\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 9, name: \"pending_total_sui_withdraw\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 10, name: \"pending_pool_token_withdraw\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 11, name: \"extra_fields\", kind: \"message\", T: () => MoveTable }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.StakingPool\n */\nexport const StakingPool = new StakingPool$Type();\n"],
  "mappings": "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",
  "names": []
}
