{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { JwkId } from \"./jwk\";\nimport { SignatureScheme } from \"./signature_scheme\";\nimport { Bcs } from \"./bcs\";\n/**\n * A signature from a user.\n *\n * @generated from protobuf message sui.rpc.v2.UserSignature\n */\nexport interface UserSignature {\n    /**\n     * This signature serialized as as BCS.\n     *\n     * When provided as input this will support both the form that is length\n     * prefixed as well as not length prefixed.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Bcs bcs = 1;\n     */\n    bcs?: Bcs;\n    /**\n     * The signature scheme of this signature.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 2;\n     */\n    scheme?: SignatureScheme;\n    /**\n     * @generated from protobuf oneof: signature\n     */\n    signature: {\n        oneofKind: \"simple\";\n        /**\n         * Simple signature if scheme is ed25519 | secp256k1 | secp256r1.\n         *\n         * @generated from protobuf field: sui.rpc.v2.SimpleSignature simple = 3;\n         */\n        simple: SimpleSignature;\n    } | {\n        oneofKind: \"multisig\";\n        /**\n         * The multisig aggregated signature if scheme is `MULTISIG`.\n         *\n         * @generated from protobuf field: sui.rpc.v2.MultisigAggregatedSignature multisig = 4;\n         */\n        multisig: MultisigAggregatedSignature;\n    } | {\n        oneofKind: \"zklogin\";\n        /**\n         * The zklogin authenticator if scheme is `ZKLOGIN`.\n         *\n         * @generated from protobuf field: sui.rpc.v2.ZkLoginAuthenticator zklogin = 5;\n         */\n        zklogin: ZkLoginAuthenticator;\n    } | {\n        oneofKind: \"passkey\";\n        /**\n         * The passkey authenticator if scheme is `PASSKEY`.\n         *\n         * @generated from protobuf field: sui.rpc.v2.PasskeyAuthenticator passkey = 6;\n         */\n        passkey: PasskeyAuthenticator;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Either an ed25519, secp256k1 or secp256r1 signature\n *\n * @generated from protobuf message sui.rpc.v2.SimpleSignature\n */\nexport interface SimpleSignature {\n    /**\n     * The signature scheme of this signature.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n     */\n    scheme?: SignatureScheme;\n    /**\n     * Signature bytes\n     *\n     * @generated from protobuf field: optional bytes signature = 2;\n     */\n    signature?: Uint8Array;\n    /**\n     * Public key bytes\n     *\n     * @generated from protobuf field: optional bytes public_key = 3;\n     */\n    publicKey?: Uint8Array;\n}\n/**\n * Public key equivalent for zklogin authenticators.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginPublicIdentifier\n */\nexport interface ZkLoginPublicIdentifier {\n    /**\n     * @generated from protobuf field: optional string iss = 1;\n     */\n    iss?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string address_seed = 2;\n     */\n    addressSeed?: string;\n}\n/**\n * Set of valid public keys for multisig committee members.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMemberPublicKey\n */\nexport interface MultisigMemberPublicKey {\n    /**\n     * The signature scheme of this public key.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n     */\n    scheme?: SignatureScheme;\n    /**\n     * Public key bytes if scheme is ed25519 | secp256k1 | secp256r1 | passkey.\n     *\n     * @generated from protobuf field: optional bytes public_key = 2;\n     */\n    publicKey?: Uint8Array;\n    /**\n     * A zklogin public identifier if scheme is zklogin.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginPublicIdentifier zklogin = 3;\n     */\n    zklogin?: ZkLoginPublicIdentifier;\n}\n/**\n * A member in a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMember\n */\nexport interface MultisigMember {\n    /**\n     * The public key of the committee member.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MultisigMemberPublicKey public_key = 1;\n     */\n    publicKey?: MultisigMemberPublicKey;\n    /**\n     * The weight of this member's signature.\n     *\n     * @generated from protobuf field: optional uint32 weight = 2;\n     */\n    weight?: number;\n}\n/**\n * A multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigCommittee\n */\nexport interface MultisigCommittee {\n    /**\n     * A list of committee members and their corresponding weight.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.MultisigMember members = 1;\n     */\n    members: MultisigMember[];\n    /**\n     * The threshold of signatures needed to validate a signature from\n     * this committee.\n     *\n     * @generated from protobuf field: optional uint32 threshold = 2;\n     */\n    threshold?: number;\n}\n/**\n * Aggregated signature from members of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigAggregatedSignature\n */\nexport interface MultisigAggregatedSignature {\n    /**\n     * The plain signatures encoded with signature scheme.\n     *\n     * The signatures must be in the same order as they are listed in the committee.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.MultisigMemberSignature signatures = 1;\n     */\n    signatures: MultisigMemberSignature[];\n    /**\n     * Bitmap indicating which committee members contributed to the\n     * signature.\n     *\n     * @generated from protobuf field: optional uint32 bitmap = 2;\n     */\n    bitmap?: number;\n    /**\n     * If present, means this signature's on-chain format uses the old\n     * legacy multisig format.\n     *\n     * @generated from protobuf field: optional bytes legacy_bitmap = 3;\n     */\n    legacyBitmap?: Uint8Array;\n    /**\n     * The committee to use to validate this signature.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.MultisigCommittee committee = 4;\n     */\n    committee?: MultisigCommittee;\n}\n/**\n * A signature from a member of a multisig committee.\n *\n * @generated from protobuf message sui.rpc.v2.MultisigMemberSignature\n */\nexport interface MultisigMemberSignature {\n    /**\n     * The signature scheme of this signature.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SignatureScheme scheme = 1;\n     */\n    scheme?: SignatureScheme;\n    /**\n     * Signature bytes if scheme is ed25519 | secp256k1 | secp256r1.\n     *\n     * @generated from protobuf field: optional bytes signature = 2;\n     */\n    signature?: Uint8Array;\n    /**\n     * The zklogin authenticator if scheme is `ZKLOGIN`.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginAuthenticator zklogin = 3;\n     */\n    zklogin?: ZkLoginAuthenticator;\n    /**\n     * The passkey authenticator if scheme is `PASSKEY`.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.PasskeyAuthenticator passkey = 4;\n     */\n    passkey?: PasskeyAuthenticator;\n}\n/**\n * A zklogin authenticator.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginAuthenticator\n */\nexport interface ZkLoginAuthenticator {\n    /**\n     * Zklogin proof and inputs required to perform proof verification.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginInputs inputs = 1;\n     */\n    inputs?: ZkLoginInputs;\n    /**\n     * Maximum epoch for which the proof is valid.\n     *\n     * @generated from protobuf field: optional uint64 max_epoch = 2;\n     */\n    maxEpoch?: bigint;\n    /**\n     * User signature with the public key attested to by the provided proof.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SimpleSignature signature = 3;\n     */\n    signature?: SimpleSignature;\n    /**\n     * The public identifier (similar to a public key) for this zklogin authenticator\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginPublicIdentifier public_identifier = 4;\n     */\n    publicIdentifier?: ZkLoginPublicIdentifier;\n    /**\n     * The id of the JWK used to authorize this zklogin authenticator\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.JwkId jwk_id = 5;\n     */\n    jwkId?: JwkId;\n}\n/**\n * A zklogin groth16 proof and the required inputs to perform proof verification.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginInputs\n */\nexport interface ZkLoginInputs {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginProof proof_points = 1;\n     */\n    proofPoints?: ZkLoginProof;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.ZkLoginClaim iss_base64_details = 2;\n     */\n    issBase64Details?: ZkLoginClaim;\n    /**\n     * @generated from protobuf field: optional string header_base64 = 3;\n     */\n    headerBase64?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string address_seed = 4;\n     */\n    addressSeed?: string;\n}\n/**\n * A zklogin groth16 proof.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginProof\n */\nexport interface ZkLoginProof {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.CircomG1 a = 1;\n     */\n    a?: CircomG1;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.CircomG2 b = 2;\n     */\n    b?: CircomG2;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.CircomG1 c = 3;\n     */\n    c?: CircomG1;\n}\n/**\n * A claim of the iss in a zklogin proof.\n *\n * @generated from protobuf message sui.rpc.v2.ZkLoginClaim\n */\nexport interface ZkLoginClaim {\n    /**\n     * @generated from protobuf field: optional string value = 1;\n     */\n    value?: string;\n    /**\n     * @generated from protobuf field: optional uint32 index_mod_4 = 2;\n     */\n    indexMod4?: number;\n}\n/**\n * A G1 point.\n *\n * @generated from protobuf message sui.rpc.v2.CircomG1\n */\nexport interface CircomG1 {\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e0 = 1;\n     */\n    e0?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e1 = 2;\n     */\n    e1?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e2 = 3;\n     */\n    e2?: string;\n}\n/**\n * A G2 point.\n *\n * @generated from protobuf message sui.rpc.v2.CircomG2\n */\nexport interface CircomG2 {\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e00 = 1;\n     */\n    e00?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e01 = 2;\n     */\n    e01?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e10 = 3;\n     */\n    e10?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e11 = 4;\n     */\n    e11?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e20 = 5;\n     */\n    e20?: string;\n    /**\n     * base10 encoded Bn254FieldElement\n     *\n     * @generated from protobuf field: optional string e21 = 6;\n     */\n    e21?: string;\n}\n/**\n * A passkey authenticator.\n *\n * See\n * [struct.PasskeyAuthenticator](https://mystenlabs.github.io/sui-rust-sdk/sui_sdk_types/struct.PasskeyAuthenticator.html#bcs)\n * for more information on the requirements on the shape of the\n * `client_data_json` field.\n *\n * @generated from protobuf message sui.rpc.v2.PasskeyAuthenticator\n */\nexport interface PasskeyAuthenticator {\n    /**\n     * Opaque authenticator data for this passkey signature.\n     *\n     * See [Authenticator Data](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-data) for\n     * more information on this field.\n     *\n     * @generated from protobuf field: optional bytes authenticator_data = 1;\n     */\n    authenticatorData?: Uint8Array;\n    /**\n     * Structured, unparsed, JSON for this passkey signature.\n     *\n     * See [CollectedClientData](https://www.w3.org/TR/webauthn-2/#dictdef-collectedclientdata)\n     * for more information on this field.\n     *\n     * @generated from protobuf field: optional string client_data_json = 2;\n     */\n    clientDataJson?: string;\n    /**\n     * A secp256r1 signature.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.SimpleSignature signature = 3;\n     */\n    signature?: SimpleSignature;\n}\n/**\n * The validator set for a particular epoch.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorCommittee\n */\nexport interface ValidatorCommittee {\n    /**\n     * The epoch where this committee governs.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * The committee members.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ValidatorCommitteeMember members = 2;\n     */\n    members: ValidatorCommitteeMember[];\n}\n/**\n * A member of a validator committee.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorCommitteeMember\n */\nexport interface ValidatorCommitteeMember {\n    /**\n     * The 96-byte Bls12381 public key for this validator.\n     *\n     * @generated from protobuf field: optional bytes public_key = 1;\n     */\n    publicKey?: Uint8Array;\n    /**\n     * voting weight this validator possesses.\n     *\n     * @generated from protobuf field: optional uint64 weight = 2;\n     */\n    weight?: bigint;\n}\n/**\n * / An aggregated signature from multiple validators.\n *\n * @generated from protobuf message sui.rpc.v2.ValidatorAggregatedSignature\n */\nexport interface ValidatorAggregatedSignature {\n    /**\n     * The epoch when this signature was produced.\n     *\n     * This can be used to lookup the `ValidatorCommittee` from this epoch\n     * to verify this signature.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * The 48-byte Bls12381 aggregated signature.\n     *\n     * @generated from protobuf field: optional bytes signature = 2;\n     */\n    signature?: Uint8Array;\n    /**\n     * Bitmap indicating which members of the committee contributed to\n     * this signature.\n     *\n     * @generated from protobuf field: optional bytes bitmap = 3;\n     */\n    bitmap?: Uint8Array;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UserSignature$Type extends MessageType<UserSignature> {\n    constructor() {\n        super(\"sui.rpc.v2.UserSignature\", [\n            { no: 1, name: \"bcs\", kind: \"message\", T: () => Bcs },\n            { no: 2, name: \"scheme\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.SignatureScheme\", SignatureScheme] },\n            { no: 3, name: \"simple\", kind: \"message\", oneof: \"signature\", T: () => SimpleSignature },\n            { no: 4, name: \"multisig\", kind: \"message\", oneof: \"signature\", T: () => MultisigAggregatedSignature },\n            { no: 5, name: \"zklogin\", kind: \"message\", oneof: \"signature\", T: () => ZkLoginAuthenticator },\n            { no: 6, name: \"passkey\", kind: \"message\", oneof: \"signature\", T: () => PasskeyAuthenticator }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.UserSignature\n */\nexport const UserSignature = new UserSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimpleSignature$Type extends MessageType<SimpleSignature> {\n    constructor() {\n        super(\"sui.rpc.v2.SimpleSignature\", [\n            { no: 1, name: \"scheme\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.SignatureScheme\", SignatureScheme] },\n            { no: 2, name: \"signature\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SimpleSignature\n */\nexport const SimpleSignature = new SimpleSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginPublicIdentifier$Type extends MessageType<ZkLoginPublicIdentifier> {\n    constructor() {\n        super(\"sui.rpc.v2.ZkLoginPublicIdentifier\", [\n            { no: 1, name: \"iss\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"address_seed\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginPublicIdentifier\n */\nexport const ZkLoginPublicIdentifier = new ZkLoginPublicIdentifier$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberPublicKey$Type extends MessageType<MultisigMemberPublicKey> {\n    constructor() {\n        super(\"sui.rpc.v2.MultisigMemberPublicKey\", [\n            { no: 1, name: \"scheme\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.SignatureScheme\", SignatureScheme] },\n            { no: 2, name: \"public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"zklogin\", kind: \"message\", T: () => ZkLoginPublicIdentifier }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMemberPublicKey\n */\nexport const MultisigMemberPublicKey = new MultisigMemberPublicKey$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMember$Type extends MessageType<MultisigMember> {\n    constructor() {\n        super(\"sui.rpc.v2.MultisigMember\", [\n            { no: 1, name: \"public_key\", kind: \"message\", T: () => MultisigMemberPublicKey },\n            { no: 2, name: \"weight\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMember\n */\nexport const MultisigMember = new MultisigMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigCommittee$Type extends MessageType<MultisigCommittee> {\n    constructor() {\n        super(\"sui.rpc.v2.MultisigCommittee\", [\n            { no: 1, name: \"members\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => MultisigMember },\n            { no: 2, name: \"threshold\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigCommittee\n */\nexport const MultisigCommittee = new MultisigCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigAggregatedSignature$Type extends MessageType<MultisigAggregatedSignature> {\n    constructor() {\n        super(\"sui.rpc.v2.MultisigAggregatedSignature\", [\n            { no: 1, name: \"signatures\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => MultisigMemberSignature },\n            { no: 2, name: \"bitmap\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ },\n            { no: 3, name: \"legacy_bitmap\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"committee\", kind: \"message\", T: () => MultisigCommittee }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigAggregatedSignature\n */\nexport const MultisigAggregatedSignature = new MultisigAggregatedSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MultisigMemberSignature$Type extends MessageType<MultisigMemberSignature> {\n    constructor() {\n        super(\"sui.rpc.v2.MultisigMemberSignature\", [\n            { no: 1, name: \"scheme\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.SignatureScheme\", SignatureScheme] },\n            { no: 2, name: \"signature\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"zklogin\", kind: \"message\", T: () => ZkLoginAuthenticator },\n            { no: 4, name: \"passkey\", kind: \"message\", T: () => PasskeyAuthenticator }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MultisigMemberSignature\n */\nexport const MultisigMemberSignature = new MultisigMemberSignature$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginAuthenticator$Type extends MessageType<ZkLoginAuthenticator> {\n    constructor() {\n        super(\"sui.rpc.v2.ZkLoginAuthenticator\", [\n            { no: 1, name: \"inputs\", kind: \"message\", T: () => ZkLoginInputs },\n            { no: 2, name: \"max_epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"signature\", kind: \"message\", T: () => SimpleSignature },\n            { no: 4, name: \"public_identifier\", kind: \"message\", T: () => ZkLoginPublicIdentifier },\n            { no: 5, name: \"jwk_id\", kind: \"message\", T: () => JwkId }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginAuthenticator\n */\nexport const ZkLoginAuthenticator = new ZkLoginAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginInputs$Type extends MessageType<ZkLoginInputs> {\n    constructor() {\n        super(\"sui.rpc.v2.ZkLoginInputs\", [\n            { no: 1, name: \"proof_points\", kind: \"message\", T: () => ZkLoginProof },\n            { no: 2, name: \"iss_base64_details\", kind: \"message\", T: () => ZkLoginClaim },\n            { no: 3, name: \"header_base64\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"address_seed\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginInputs\n */\nexport const ZkLoginInputs = new ZkLoginInputs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginProof$Type extends MessageType<ZkLoginProof> {\n    constructor() {\n        super(\"sui.rpc.v2.ZkLoginProof\", [\n            { no: 1, name: \"a\", kind: \"message\", T: () => CircomG1 },\n            { no: 2, name: \"b\", kind: \"message\", T: () => CircomG2 },\n            { no: 3, name: \"c\", kind: \"message\", T: () => CircomG1 }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginProof\n */\nexport const ZkLoginProof = new ZkLoginProof$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ZkLoginClaim$Type extends MessageType<ZkLoginClaim> {\n    constructor() {\n        super(\"sui.rpc.v2.ZkLoginClaim\", [\n            { no: 1, name: \"value\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"index_mod_4\", kind: \"scalar\", opt: true, T: 13 /*ScalarType.UINT32*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ZkLoginClaim\n */\nexport const ZkLoginClaim = new ZkLoginClaim$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG1$Type extends MessageType<CircomG1> {\n    constructor() {\n        super(\"sui.rpc.v2.CircomG1\", [\n            { no: 1, name: \"e0\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"e1\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"e2\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CircomG1\n */\nexport const CircomG1 = new CircomG1$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CircomG2$Type extends MessageType<CircomG2> {\n    constructor() {\n        super(\"sui.rpc.v2.CircomG2\", [\n            { no: 1, name: \"e00\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"e01\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"e10\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"e11\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"e20\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"e21\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CircomG2\n */\nexport const CircomG2 = new CircomG2$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PasskeyAuthenticator$Type extends MessageType<PasskeyAuthenticator> {\n    constructor() {\n        super(\"sui.rpc.v2.PasskeyAuthenticator\", [\n            { no: 1, name: \"authenticator_data\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"client_data_json\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"signature\", kind: \"message\", T: () => SimpleSignature }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.PasskeyAuthenticator\n */\nexport const PasskeyAuthenticator = new PasskeyAuthenticator$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommittee$Type extends MessageType<ValidatorCommittee> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorCommittee\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"members\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorCommitteeMember }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorCommittee\n */\nexport const ValidatorCommittee = new ValidatorCommittee$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorCommitteeMember$Type extends MessageType<ValidatorCommitteeMember> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorCommitteeMember\", [\n            { no: 1, name: \"public_key\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"weight\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorCommitteeMember\n */\nexport const ValidatorCommitteeMember = new ValidatorCommitteeMember$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorAggregatedSignature$Type extends MessageType<ValidatorAggregatedSignature> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorAggregatedSignature\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"signature\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"bitmap\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorAggregatedSignature\n */\nexport const ValidatorAggregatedSignature = new ValidatorAggregatedSignature$Type();\n"],
  "mappings": "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",
  "names": []
}
