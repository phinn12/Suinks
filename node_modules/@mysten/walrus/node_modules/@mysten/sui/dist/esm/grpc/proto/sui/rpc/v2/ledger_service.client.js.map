{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/ledger_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/ledger_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { LedgerService } from \"./ledger_service\";\nimport type { GetEpochResponse } from \"./ledger_service\";\nimport type { GetEpochRequest } from \"./ledger_service\";\nimport type { GetCheckpointResponse } from \"./ledger_service\";\nimport type { GetCheckpointRequest } from \"./ledger_service\";\nimport type { BatchGetTransactionsResponse } from \"./ledger_service\";\nimport type { BatchGetTransactionsRequest } from \"./ledger_service\";\nimport type { GetTransactionResponse } from \"./ledger_service\";\nimport type { GetTransactionRequest } from \"./ledger_service\";\nimport type { BatchGetObjectsResponse } from \"./ledger_service\";\nimport type { BatchGetObjectsRequest } from \"./ledger_service\";\nimport type { GetObjectResponse } from \"./ledger_service\";\nimport type { GetObjectRequest } from \"./ledger_service\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { GetServiceInfoResponse } from \"./ledger_service\";\nimport type { GetServiceInfoRequest } from \"./ledger_service\";\nimport type { UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated from protobuf service sui.rpc.v2.LedgerService\n */\nexport interface ILedgerServiceClient {\n    /**\n     * Query the service for general information about its current state.\n     *\n     * @generated from protobuf rpc: GetServiceInfo(sui.rpc.v2.GetServiceInfoRequest) returns (sui.rpc.v2.GetServiceInfoResponse);\n     */\n    getServiceInfo(input: GetServiceInfoRequest, options?: RpcOptions): UnaryCall<GetServiceInfoRequest, GetServiceInfoResponse>;\n    /**\n     * @generated from protobuf rpc: GetObject(sui.rpc.v2.GetObjectRequest) returns (sui.rpc.v2.GetObjectResponse);\n     */\n    getObject(input: GetObjectRequest, options?: RpcOptions): UnaryCall<GetObjectRequest, GetObjectResponse>;\n    /**\n     * @generated from protobuf rpc: BatchGetObjects(sui.rpc.v2.BatchGetObjectsRequest) returns (sui.rpc.v2.BatchGetObjectsResponse);\n     */\n    batchGetObjects(input: BatchGetObjectsRequest, options?: RpcOptions): UnaryCall<BatchGetObjectsRequest, BatchGetObjectsResponse>;\n    /**\n     * @generated from protobuf rpc: GetTransaction(sui.rpc.v2.GetTransactionRequest) returns (sui.rpc.v2.GetTransactionResponse);\n     */\n    getTransaction(input: GetTransactionRequest, options?: RpcOptions): UnaryCall<GetTransactionRequest, GetTransactionResponse>;\n    /**\n     * @generated from protobuf rpc: BatchGetTransactions(sui.rpc.v2.BatchGetTransactionsRequest) returns (sui.rpc.v2.BatchGetTransactionsResponse);\n     */\n    batchGetTransactions(input: BatchGetTransactionsRequest, options?: RpcOptions): UnaryCall<BatchGetTransactionsRequest, BatchGetTransactionsResponse>;\n    /**\n     * @generated from protobuf rpc: GetCheckpoint(sui.rpc.v2.GetCheckpointRequest) returns (sui.rpc.v2.GetCheckpointResponse);\n     */\n    getCheckpoint(input: GetCheckpointRequest, options?: RpcOptions): UnaryCall<GetCheckpointRequest, GetCheckpointResponse>;\n    /**\n     * @generated from protobuf rpc: GetEpoch(sui.rpc.v2.GetEpochRequest) returns (sui.rpc.v2.GetEpochResponse);\n     */\n    getEpoch(input: GetEpochRequest, options?: RpcOptions): UnaryCall<GetEpochRequest, GetEpochResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2.LedgerService\n */\nexport class LedgerServiceClient implements ILedgerServiceClient, ServiceInfo {\n    typeName = LedgerService.typeName;\n    methods = LedgerService.methods;\n    options = LedgerService.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Query the service for general information about its current state.\n     *\n     * @generated from protobuf rpc: GetServiceInfo(sui.rpc.v2.GetServiceInfoRequest) returns (sui.rpc.v2.GetServiceInfoResponse);\n     */\n    getServiceInfo(input: GetServiceInfoRequest, options?: RpcOptions): UnaryCall<GetServiceInfoRequest, GetServiceInfoResponse> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetServiceInfoRequest, GetServiceInfoResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: GetObject(sui.rpc.v2.GetObjectRequest) returns (sui.rpc.v2.GetObjectResponse);\n     */\n    getObject(input: GetObjectRequest, options?: RpcOptions): UnaryCall<GetObjectRequest, GetObjectResponse> {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetObjectRequest, GetObjectResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: BatchGetObjects(sui.rpc.v2.BatchGetObjectsRequest) returns (sui.rpc.v2.BatchGetObjectsResponse);\n     */\n    batchGetObjects(input: BatchGetObjectsRequest, options?: RpcOptions): UnaryCall<BatchGetObjectsRequest, BatchGetObjectsResponse> {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BatchGetObjectsRequest, BatchGetObjectsResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: GetTransaction(sui.rpc.v2.GetTransactionRequest) returns (sui.rpc.v2.GetTransactionResponse);\n     */\n    getTransaction(input: GetTransactionRequest, options?: RpcOptions): UnaryCall<GetTransactionRequest, GetTransactionResponse> {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetTransactionRequest, GetTransactionResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: BatchGetTransactions(sui.rpc.v2.BatchGetTransactionsRequest) returns (sui.rpc.v2.BatchGetTransactionsResponse);\n     */\n    batchGetTransactions(input: BatchGetTransactionsRequest, options?: RpcOptions): UnaryCall<BatchGetTransactionsRequest, BatchGetTransactionsResponse> {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return stackIntercept<BatchGetTransactionsRequest, BatchGetTransactionsResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: GetCheckpoint(sui.rpc.v2.GetCheckpointRequest) returns (sui.rpc.v2.GetCheckpointResponse);\n     */\n    getCheckpoint(input: GetCheckpointRequest, options?: RpcOptions): UnaryCall<GetCheckpointRequest, GetCheckpointResponse> {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetCheckpointRequest, GetCheckpointResponse>(\"unary\", this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: GetEpoch(sui.rpc.v2.GetEpochRequest) returns (sui.rpc.v2.GetEpochResponse);\n     */\n    getEpoch(input: GetEpochRequest, options?: RpcOptions): UnaryCall<GetEpochRequest, GetEpochResponse> {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return stackIntercept<GetEpochRequest, GetEpochResponse>(\"unary\", this._transport, method, opt, input);\n    }\n}\n"],
  "mappings": "AAaA,SAAS,qBAAqB;AAa9B,SAAS,sBAAsB;AA2CxB,MAAM,oBAAiE;AAAA,EAI1E,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,cAAc;AACzB,mBAAU,cAAc;AACxB,mBAAU,cAAc;AAAA,EAExB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,OAA8B,SAAgF;AACzH,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAA8D,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,OAAyB,SAAsE;AACrG,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAAoD,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,OAA+B,SAAkF;AAC7H,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAAgE,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACvH;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,OAA8B,SAAgF;AACzH,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAA8D,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,OAAoC,SAA4F;AACjJ,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAA0E,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACjI;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc,OAA6B,SAA8E;AACrH,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAA4D,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACnH;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,OAAwB,SAAoE;AACjG,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAAkD,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACzG;AACJ;",
  "names": []
}
