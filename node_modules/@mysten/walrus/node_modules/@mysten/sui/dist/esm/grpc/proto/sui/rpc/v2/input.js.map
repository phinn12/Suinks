{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/input.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/input.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Value } from \"../../../google/protobuf/struct\";\n/**\n * An input to a user transaction.\n *\n * @generated from protobuf message sui.rpc.v2.Input\n */\nexport interface Input {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.Input.InputKind kind = 1;\n     */\n    kind?: Input_InputKind;\n    /**\n     * A move value serialized as BCS.\n     *\n     * For normal operations this is required to be a move primitive type and not contain structs\n     * or objects.\n     *\n     * @generated from protobuf field: optional bytes pure = 2;\n     */\n    pure?: Uint8Array;\n    /**\n     * `ObjectId` of the object input.\n     *\n     * @generated from protobuf field: optional string object_id = 3;\n     */\n    objectId?: string;\n    /**\n     * Requested version of the input object when `kind` is `IMMUTABLE_OR_OWNED`\n     * or `RECEIVING` or if `kind` is `SHARED` this is the initial version of the\n     * object when it was shared\n     *\n     * @generated from protobuf field: optional uint64 version = 4;\n     */\n    version?: bigint;\n    /**\n     * The digest of this object.\n     *\n     * @generated from protobuf field: optional string digest = 5;\n     */\n    digest?: string;\n    /**\n     * Controls whether the caller asks for a mutable reference to the shared\n     * object.\n     *\n     * @generated from protobuf field: optional bool mutable = 6;\n     */\n    mutable?: boolean;\n    /**\n     * A literal value\n     *\n     * INPUT ONLY\n     *\n     * @generated from protobuf field: optional google.protobuf.Value literal = 1000;\n     */\n    literal?: Value;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.Input.InputKind\n */\nexport enum Input_InputKind {\n    /**\n     * @generated from protobuf enum value: INPUT_KIND_UNKNOWN = 0;\n     */\n    INPUT_KIND_UNKNOWN = 0,\n    /**\n     * A move value serialized as BCS.\n     *\n     * @generated from protobuf enum value: PURE = 1;\n     */\n    PURE = 1,\n    /**\n     * A Move object that is either immutable or address owned.\n     *\n     * @generated from protobuf enum value: IMMUTABLE_OR_OWNED = 2;\n     */\n    IMMUTABLE_OR_OWNED = 2,\n    /**\n     * A Move object whose owner is \"Shared\".\n     *\n     * @generated from protobuf enum value: SHARED = 3;\n     */\n    SHARED = 3,\n    /**\n     * A Move object that is attempted to be received in this transaction.\n     *\n     * @generated from protobuf enum value: RECEIVING = 4;\n     */\n    RECEIVING = 4\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Input$Type extends MessageType<Input> {\n    constructor() {\n        super(\"sui.rpc.v2.Input\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.Input.InputKind\", Input_InputKind] },\n            { no: 2, name: \"pure\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"object_id\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"mutable\", kind: \"scalar\", opt: true, T: 8 /*ScalarType.BOOL*/ },\n            { no: 1000, name: \"literal\", kind: \"message\", T: () => Value }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Input\n */\nexport const Input = new Input$Type();\n"],
  "mappings": "AAWA,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AA2Df,IAAK,kBAAL,kBAAKA,qBAAL;AAIH,EAAAA,kCAAA,wBAAqB,KAArB;AAMA,EAAAA,kCAAA,UAAO,KAAP;AAMA,EAAAA,kCAAA,wBAAqB,KAArB;AAMA,EAAAA,kCAAA,YAAS,KAAT;AAMA,EAAAA,kCAAA,eAAY,KAAZ;AA5BQ,SAAAA;AAAA,GAAA;AA+BZ,MAAM,mBAAmB,YAAmB;AAAA,EACxC,cAAc;AACV,UAAM,oBAAoB;AAAA,MACtB,EAAE,IAAI,GAAG,MAAM,QAAQ,MAAM,QAAQ,KAAK,MAAM,GAAG,MAAM,CAAC,8BAA8B,eAAe,EAAE;AAAA,MACzG;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAQ,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC7E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAa,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAClF;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA,QAAyB,GAAG;AAAA;AAAA,MAAsB;AAAA,MAC1G;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAU,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAwB;AAAA,MAC/E;AAAA,QAAE,IAAI;AAAA,QAAG,MAAM;AAAA,QAAW,MAAM;AAAA,QAAU,KAAK;AAAA,QAAM,GAAG;AAAA;AAAA,MAAsB;AAAA,MAC9E,EAAE,IAAI,KAAM,MAAM,WAAW,MAAM,WAAW,GAAG,MAAM,MAAM;AAAA,IACjE,CAAC;AAAA,EACL;AACJ;AAIO,MAAM,QAAQ,IAAI,WAAW;",
  "names": ["Input_InputKind"]
}
