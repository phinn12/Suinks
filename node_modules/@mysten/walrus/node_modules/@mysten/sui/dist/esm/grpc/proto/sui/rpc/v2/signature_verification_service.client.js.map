{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/signature_verification_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/signature_verification_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { SignatureVerificationService } from \"./signature_verification_service\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { VerifySignatureResponse } from \"./signature_verification_service\";\nimport type { VerifySignatureRequest } from \"./signature_verification_service\";\nimport type { UnaryCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated from protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport interface ISignatureVerificationServiceClient {\n    /**\n     * Perform signature verification of a UserSignature against the provided message.\n     *\n     * @generated from protobuf rpc: VerifySignature(sui.rpc.v2.VerifySignatureRequest) returns (sui.rpc.v2.VerifySignatureResponse);\n     */\n    verifySignature(input: VerifySignatureRequest, options?: RpcOptions): UnaryCall<VerifySignatureRequest, VerifySignatureResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2.SignatureVerificationService\n */\nexport class SignatureVerificationServiceClient implements ISignatureVerificationServiceClient, ServiceInfo {\n    typeName = SignatureVerificationService.typeName;\n    methods = SignatureVerificationService.methods;\n    options = SignatureVerificationService.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Perform signature verification of a UserSignature against the provided message.\n     *\n     * @generated from protobuf rpc: VerifySignature(sui.rpc.v2.VerifySignatureRequest) returns (sui.rpc.v2.VerifySignatureResponse);\n     */\n    verifySignature(input: VerifySignatureRequest, options?: RpcOptions): UnaryCall<VerifySignatureRequest, VerifySignatureResponse> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<VerifySignatureRequest, VerifySignatureResponse>(\"unary\", this._transport, method, opt, input);\n    }\n}\n"],
  "mappings": "AAaA,SAAS,oCAAoC;AAC7C,SAAS,sBAAsB;AAmBxB,MAAM,mCAA+F;AAAA,EAIxG,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,6BAA6B;AACxC,mBAAU,6BAA6B;AACvC,mBAAU,6BAA6B;AAAA,EAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,OAA+B,SAAkF;AAC7H,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAAgE,SAAS,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EACvH;AACJ;",
  "names": []
}
