{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/transaction.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/transaction.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { Duration } from \"../../../google/protobuf/duration\";\nimport { Jwk } from \"./jwk\";\nimport { JwkId } from \"./jwk\";\nimport { Object } from \"./object\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\nimport { Argument } from \"./argument\";\nimport { Input } from \"./input\";\nimport { ObjectReference } from \"./object_reference\";\nimport { Bcs } from \"./bcs\";\n/**\n * A transaction.\n *\n * @generated from protobuf message sui.rpc.v2.Transaction\n */\nexport interface Transaction {\n    /**\n     * This Transaction serialized as BCS.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Bcs bcs = 1;\n     */\n    bcs?: Bcs;\n    /**\n     * The digest of this Transaction.\n     *\n     * @generated from protobuf field: optional string digest = 2;\n     */\n    digest?: string;\n    /**\n     * Version of this Transaction.\n     *\n     * @generated from protobuf field: optional int32 version = 3;\n     */\n    version?: number;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.TransactionKind kind = 4;\n     */\n    kind?: TransactionKind;\n    /**\n     * @generated from protobuf field: optional string sender = 5;\n     */\n    sender?: string;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.GasPayment gas_payment = 6;\n     */\n    gasPayment?: GasPayment;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.TransactionExpiration expiration = 7;\n     */\n    expiration?: TransactionExpiration;\n}\n/**\n * Payment information for executing a transaction.\n *\n * @generated from protobuf message sui.rpc.v2.GasPayment\n */\nexport interface GasPayment {\n    /**\n     * Set of gas objects to use for payment.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ObjectReference objects = 1;\n     */\n    objects: ObjectReference[];\n    /**\n     * Owner of the gas objects, either the transaction sender or a sponsor.\n     *\n     * @generated from protobuf field: optional string owner = 2;\n     */\n    owner?: string;\n    /**\n     * Gas unit price to use when charging for computation.\n     *\n     * Must be greater than or equal to the network's current RGP (reference gas price).\n     *\n     * @generated from protobuf field: optional uint64 price = 3;\n     */\n    price?: bigint;\n    /**\n     * Total budget willing to spend for the execution of a transaction.\n     *\n     * @generated from protobuf field: optional uint64 budget = 4;\n     */\n    budget?: bigint;\n}\n/**\n * A TTL for a transaction.\n *\n * @generated from protobuf message sui.rpc.v2.TransactionExpiration\n */\nexport interface TransactionExpiration {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.TransactionExpiration.TransactionExpirationKind kind = 1;\n     */\n    kind?: TransactionExpiration_TransactionExpirationKind;\n    /**\n     * @generated from protobuf field: optional uint64 epoch = 2;\n     */\n    epoch?: bigint;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.TransactionExpiration.TransactionExpirationKind\n */\nexport enum TransactionExpiration_TransactionExpirationKind {\n    /**\n     * @generated from protobuf enum value: TRANSACTION_EXPIRATION_KIND_UNKNOWN = 0;\n     */\n    TRANSACTION_EXPIRATION_KIND_UNKNOWN = 0,\n    /**\n     * The transaction has no expiration.\n     *\n     * @generated from protobuf enum value: NONE = 1;\n     */\n    NONE = 1,\n    /**\n     * Validators won't sign and execute transaction unless the expiration epoch\n     * is greater than or equal to the current epoch.\n     *\n     * @generated from protobuf enum value: EPOCH = 2;\n     */\n    EPOCH = 2\n}\n/**\n * Transaction type.\n *\n * @generated from protobuf message sui.rpc.v2.TransactionKind\n */\nexport interface TransactionKind {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.TransactionKind.Kind kind = 1;\n     */\n    kind?: TransactionKind_Kind;\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"programmableTransaction\";\n        /**\n         * A transaction comprised of a list of native commands and Move calls.\n         *\n         * @generated from protobuf field: sui.rpc.v2.ProgrammableTransaction programmable_transaction = 2;\n         */\n        programmableTransaction: ProgrammableTransaction;\n    } | {\n        oneofKind: \"changeEpoch\";\n        /**\n         * System transaction used to end an epoch.\n         *\n         * The `ChangeEpoch` variant is now deprecated (but the `ChangeEpoch` struct is still used by\n         * `EndOfEpochTransaction`).\n         *\n         * @generated from protobuf field: sui.rpc.v2.ChangeEpoch change_epoch = 3;\n         */\n        changeEpoch: ChangeEpoch;\n    } | {\n        oneofKind: \"genesis\";\n        /**\n         * Transaction used to initialize the chain state.\n         *\n         * Only valid if in the genesis checkpoint (0) and if this is the very first transaction ever\n         * executed on the chain.\n         *\n         * @generated from protobuf field: sui.rpc.v2.GenesisTransaction genesis = 4;\n         */\n        genesis: GenesisTransaction;\n    } | {\n        oneofKind: \"consensusCommitPrologue\";\n        /**\n         * consensus commit update info\n         *\n         * @generated from protobuf field: sui.rpc.v2.ConsensusCommitPrologue consensus_commit_prologue = 5;\n         */\n        consensusCommitPrologue: ConsensusCommitPrologue;\n    } | {\n        oneofKind: \"authenticatorStateUpdate\";\n        /**\n         * Update set of valid JWKs used for zklogin.\n         *\n         * @generated from protobuf field: sui.rpc.v2.AuthenticatorStateUpdate authenticator_state_update = 6;\n         */\n        authenticatorStateUpdate: AuthenticatorStateUpdate;\n    } | {\n        oneofKind: \"endOfEpoch\";\n        /**\n         * Set of operations to run at the end of the epoch to close out the current epoch and start\n         * the next one.\n         *\n         * @generated from protobuf field: sui.rpc.v2.EndOfEpochTransaction end_of_epoch = 7;\n         */\n        endOfEpoch: EndOfEpochTransaction;\n    } | {\n        oneofKind: \"randomnessStateUpdate\";\n        /**\n         * Randomness update.\n         *\n         * @generated from protobuf field: sui.rpc.v2.RandomnessStateUpdate randomness_state_update = 8;\n         */\n        randomnessStateUpdate: RandomnessStateUpdate;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.TransactionKind.Kind\n */\nexport enum TransactionKind_Kind {\n    /**\n     * @generated from protobuf enum value: KIND_UNKNOWN = 0;\n     */\n    KIND_UNKNOWN = 0,\n    /**\n     * A user transaction comprised of a list of native commands and Move calls.\n     *\n     * @generated from protobuf enum value: PROGRAMMABLE_TRANSACTION = 1;\n     */\n    PROGRAMMABLE_TRANSACTION = 1,\n    /**\n     * System transaction used to end an epoch.\n     *\n     * The `ChangeEpoch` variant is now deprecated (but the `ChangeEpoch` struct is still used by\n     * `EndOfEpochTransaction`).\n     *\n     * @generated from protobuf enum value: CHANGE_EPOCH = 2;\n     */\n    CHANGE_EPOCH = 2,\n    /**\n     * Transaction used to initialize the chain state.\n     *\n     * Only valid if in the genesis checkpoint (0) and if this is the very first transaction ever\n     * executed on the chain.\n     *\n     * @generated from protobuf enum value: GENESIS = 3;\n     */\n    GENESIS = 3,\n    /**\n     * V1 consensus commit update.\n     *\n     * @generated from protobuf enum value: CONSENSUS_COMMIT_PROLOGUE_V1 = 4;\n     */\n    CONSENSUS_COMMIT_PROLOGUE_V1 = 4,\n    /**\n     * Update set of valid JWKs used for zklogin.\n     *\n     * @generated from protobuf enum value: AUTHENTICATOR_STATE_UPDATE = 5;\n     */\n    AUTHENTICATOR_STATE_UPDATE = 5,\n    /**\n     * Set of operations to run at the end of the epoch to close out the current epoch and start\n     * the next one.\n     *\n     * @generated from protobuf enum value: END_OF_EPOCH = 6;\n     */\n    END_OF_EPOCH = 6,\n    /**\n     * Randomness update.\n     *\n     * @generated from protobuf enum value: RANDOMNESS_STATE_UPDATE = 7;\n     */\n    RANDOMNESS_STATE_UPDATE = 7,\n    /**\n     * V2 consensus commit update.\n     *\n     * @generated from protobuf enum value: CONSENSUS_COMMIT_PROLOGUE_V2 = 8;\n     */\n    CONSENSUS_COMMIT_PROLOGUE_V2 = 8,\n    /**\n     * V3 consensus commit update.\n     *\n     * @generated from protobuf enum value: CONSENSUS_COMMIT_PROLOGUE_V3 = 9;\n     */\n    CONSENSUS_COMMIT_PROLOGUE_V3 = 9,\n    /**\n     * V4 consensus commit update.\n     *\n     * @generated from protobuf enum value: CONSENSUS_COMMIT_PROLOGUE_V4 = 10;\n     */\n    CONSENSUS_COMMIT_PROLOGUE_V4 = 10\n}\n/**\n * A user transaction.\n *\n * Contains a series of native commands and Move calls where the results of one command can be\n * used in future commands.\n *\n * @generated from protobuf message sui.rpc.v2.ProgrammableTransaction\n */\nexport interface ProgrammableTransaction {\n    /**\n     * Input objects or primitive values.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Input inputs = 1;\n     */\n    inputs: Input[];\n    /**\n     * The commands to be executed sequentially. A failure in any command\n     * results in the failure of the entire transaction.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Command commands = 2;\n     */\n    commands: Command[];\n}\n/**\n * A single command in a programmable transaction.\n *\n * @generated from protobuf message sui.rpc.v2.Command\n */\nexport interface Command {\n    /**\n     * @generated from protobuf oneof: command\n     */\n    command: {\n        oneofKind: \"moveCall\";\n        /**\n         * A call to either an entry or a public Move function.\n         *\n         * @generated from protobuf field: sui.rpc.v2.MoveCall move_call = 1;\n         */\n        moveCall: MoveCall;\n    } | {\n        oneofKind: \"transferObjects\";\n        /**\n         * `(Vec<forall T:key+store. T>, address)`\n         * It sends n-objects to the specified address. These objects must have store\n         * (public transfer) and either the previous owner must be an address or the object must\n         * be newly created.\n         *\n         * @generated from protobuf field: sui.rpc.v2.TransferObjects transfer_objects = 2;\n         */\n        transferObjects: TransferObjects;\n    } | {\n        oneofKind: \"splitCoins\";\n        /**\n         * `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`\n         * It splits off some amounts into new coins with those amounts.\n         *\n         * @generated from protobuf field: sui.rpc.v2.SplitCoins split_coins = 3;\n         */\n        splitCoins: SplitCoins;\n    } | {\n        oneofKind: \"mergeCoins\";\n        /**\n         * `(&mut Coin<T>, Vec<Coin<T>>)`\n         * It merges n-coins into the first coin.\n         *\n         * @generated from protobuf field: sui.rpc.v2.MergeCoins merge_coins = 4;\n         */\n        mergeCoins: MergeCoins;\n    } | {\n        oneofKind: \"publish\";\n        /**\n         * Publishes a Move package. It takes the package bytes and a list of the package's transitive\n         * dependencies to link against on chain.\n         *\n         * @generated from protobuf field: sui.rpc.v2.Publish publish = 5;\n         */\n        publish: Publish;\n    } | {\n        oneofKind: \"makeMoveVector\";\n        /**\n         * `forall T: Vec<T> -> vector<T>`\n         * Given n-values of the same type, it constructs a vector. For non-objects or an empty vector,\n         * the type tag must be specified.\n         *\n         * @generated from protobuf field: sui.rpc.v2.MakeMoveVector make_move_vector = 6;\n         */\n        makeMoveVector: MakeMoveVector;\n    } | {\n        oneofKind: \"upgrade\";\n        /**\n         * Upgrades a Move package.\n         * Takes (in order):\n         * 1. A vector of serialized modules for the package.\n         * 2. A vector of object ids for the transitive dependencies of the new package.\n         * 3. The object ID of the package being upgraded.\n         * 4. An argument holding the `UpgradeTicket` that must have been produced from an earlier command in the same\n         *    programmable transaction.\n         *\n         * @generated from protobuf field: sui.rpc.v2.Upgrade upgrade = 7;\n         */\n        upgrade: Upgrade;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * Command to call a Move function.\n *\n * Functions that can be called by a `MoveCall` command are those that have a function signature\n * that is either `entry` or `public` (which don't have a reference return type).\n *\n * @generated from protobuf message sui.rpc.v2.MoveCall\n */\nexport interface MoveCall {\n    /**\n     * The package containing the module and function.\n     *\n     * @generated from protobuf field: optional string package = 1;\n     */\n    package?: string;\n    /**\n     * The specific module in the package containing the function.\n     *\n     * @generated from protobuf field: optional string module = 2;\n     */\n    module?: string;\n    /**\n     * The function to be called.\n     *\n     * @generated from protobuf field: optional string function = 3;\n     */\n    function?: string;\n    /**\n     * The type arguments to the function.\n     *\n     * @generated from protobuf field: repeated string type_arguments = 4;\n     */\n    typeArguments: string[];\n    /**\n     * The arguments to the function.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Argument arguments = 5;\n     */\n    arguments: Argument[];\n}\n/**\n * Command to transfer ownership of a set of objects to an address.\n *\n * @generated from protobuf message sui.rpc.v2.TransferObjects\n */\nexport interface TransferObjects {\n    /**\n     * Set of objects to transfer.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Argument objects = 1;\n     */\n    objects: Argument[];\n    /**\n     * The address to transfer ownership to.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Argument address = 2;\n     */\n    address?: Argument;\n}\n/**\n * Command to split a single coin object into multiple coins.\n *\n * @generated from protobuf message sui.rpc.v2.SplitCoins\n */\nexport interface SplitCoins {\n    /**\n     * The coin to split.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Argument coin = 1;\n     */\n    coin?: Argument;\n    /**\n     * The amounts to split off.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Argument amounts = 2;\n     */\n    amounts: Argument[];\n}\n/**\n * Command to merge multiple coins of the same type into a single coin.\n *\n * @generated from protobuf message sui.rpc.v2.MergeCoins\n */\nexport interface MergeCoins {\n    /**\n     * Coin to merge coins into.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Argument coin = 1;\n     */\n    coin?: Argument;\n    /**\n     * Set of coins to merge into `coin`.\n     *\n     * All listed coins must be of the same type and be the same type as `coin`\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Argument coins_to_merge = 2;\n     */\n    coinsToMerge: Argument[];\n}\n/**\n * Command to publish a new Move package.\n *\n * @generated from protobuf message sui.rpc.v2.Publish\n */\nexport interface Publish {\n    /**\n     * The serialized Move modules.\n     *\n     * @generated from protobuf field: repeated bytes modules = 1;\n     */\n    modules: Uint8Array[];\n    /**\n     * Set of packages that the to-be published package depends on.\n     *\n     * @generated from protobuf field: repeated string dependencies = 2;\n     */\n    dependencies: string[];\n}\n/**\n * Command to build a Move vector out of a set of individual elements.\n *\n * @generated from protobuf message sui.rpc.v2.MakeMoveVector\n */\nexport interface MakeMoveVector {\n    /**\n     * Type of the individual elements.\n     *\n     * This is required to be set when the type can't be inferred, for example when the set of\n     * provided arguments are all pure input values.\n     *\n     * @generated from protobuf field: optional string element_type = 1;\n     */\n    elementType?: string;\n    /**\n     * The set individual elements to build the vector with.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Argument elements = 2;\n     */\n    elements: Argument[];\n}\n/**\n * Command to upgrade an already published package.\n *\n * @generated from protobuf message sui.rpc.v2.Upgrade\n */\nexport interface Upgrade {\n    /**\n     * The serialized Move modules.\n     *\n     * @generated from protobuf field: repeated bytes modules = 1;\n     */\n    modules: Uint8Array[];\n    /**\n     * Set of packages that the to-be published package depends on.\n     *\n     * @generated from protobuf field: repeated string dependencies = 2;\n     */\n    dependencies: string[];\n    /**\n     * Package ID of the package to upgrade.\n     *\n     * @generated from protobuf field: optional string package = 3;\n     */\n    package?: string;\n    /**\n     * Ticket authorizing the upgrade.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Argument ticket = 4;\n     */\n    ticket?: Argument;\n}\n/**\n * Randomness update.\n *\n * @generated from protobuf message sui.rpc.v2.RandomnessStateUpdate\n */\nexport interface RandomnessStateUpdate {\n    /**\n     * Epoch of the randomness state update transaction.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * Randomness round of the update.\n     *\n     * @generated from protobuf field: optional uint64 randomness_round = 2;\n     */\n    randomnessRound?: bigint;\n    /**\n     * Updated random bytes.\n     *\n     * @generated from protobuf field: optional bytes random_bytes = 3;\n     */\n    randomBytes?: Uint8Array;\n    /**\n     * The initial version of the randomness object that it was shared at.\n     *\n     * @generated from protobuf field: optional uint64 randomness_object_initial_shared_version = 4;\n     */\n    randomnessObjectInitialSharedVersion?: bigint;\n}\n/**\n * System transaction used to change the epoch.\n *\n * @generated from protobuf message sui.rpc.v2.ChangeEpoch\n */\nexport interface ChangeEpoch {\n    /**\n     * The next (to become) epoch ID.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * The protocol version in effect in the new epoch.\n     *\n     * @generated from protobuf field: optional uint64 protocol_version = 2;\n     */\n    protocolVersion?: bigint;\n    /**\n     * The total amount of gas charged for storage during the epoch.\n     *\n     * @generated from protobuf field: optional uint64 storage_charge = 3;\n     */\n    storageCharge?: bigint;\n    /**\n     * The total amount of gas charged for computation during the epoch.\n     *\n     * @generated from protobuf field: optional uint64 computation_charge = 4;\n     */\n    computationCharge?: bigint;\n    /**\n     * The amount of storage rebate refunded to the txn senders.\n     *\n     * @generated from protobuf field: optional uint64 storage_rebate = 5;\n     */\n    storageRebate?: bigint;\n    /**\n     * The non-refundable storage fee.\n     *\n     * @generated from protobuf field: optional uint64 non_refundable_storage_fee = 6;\n     */\n    nonRefundableStorageFee?: bigint;\n    /**\n     * Unix timestamp when epoch started.\n     *\n     * @generated from protobuf field: optional google.protobuf.Timestamp epoch_start_timestamp = 7;\n     */\n    epochStartTimestamp?: Timestamp;\n    /**\n     * System packages (specifically framework and Move stdlib) that are written before the new\n     * epoch starts. This tracks framework upgrades on chain. When executing the `ChangeEpoch` txn,\n     * the validator must write out the following modules.  Modules are provided with the version they\n     * will be upgraded to, their modules in serialized form (which include their package ID), and\n     * a list of their transitive dependencies.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.SystemPackage system_packages = 8;\n     */\n    systemPackages: SystemPackage[];\n}\n/**\n * System package.\n *\n * @generated from protobuf message sui.rpc.v2.SystemPackage\n */\nexport interface SystemPackage {\n    /**\n     * Version of the package.\n     *\n     * @generated from protobuf field: optional uint64 version = 1;\n     */\n    version?: bigint;\n    /**\n     * Move modules.\n     *\n     * @generated from protobuf field: repeated bytes modules = 2;\n     */\n    modules: Uint8Array[];\n    /**\n     * Package dependencies.\n     *\n     * @generated from protobuf field: repeated string dependencies = 3;\n     */\n    dependencies: string[];\n}\n/**\n * The genesis transaction.\n *\n * @generated from protobuf message sui.rpc.v2.GenesisTransaction\n */\nexport interface GenesisTransaction {\n    /**\n     * Set of genesis objects.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.Object objects = 1;\n     */\n    objects: Object[];\n}\n/**\n * Consensus commit prologue system transaction.\n *\n * This message can represent V1, V2, and V3 prologue types.\n *\n * @generated from protobuf message sui.rpc.v2.ConsensusCommitPrologue\n */\nexport interface ConsensusCommitPrologue {\n    /**\n     * Epoch of the commit prologue transaction.\n     *\n     * Present in V1, V2, V3, V4.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * Consensus round of the commit.\n     *\n     * Present in V1, V2, V3, V4.\n     *\n     * @generated from protobuf field: optional uint64 round = 2;\n     */\n    round?: bigint;\n    /**\n     * Unix timestamp from consensus.\n     *\n     * Present in V1, V2, V3, V4.\n     *\n     * @generated from protobuf field: optional google.protobuf.Timestamp commit_timestamp = 3;\n     */\n    commitTimestamp?: Timestamp;\n    /**\n     * Digest of consensus output.\n     *\n     * Present in V2, V3, V4.\n     *\n     * @generated from protobuf field: optional string consensus_commit_digest = 4;\n     */\n    consensusCommitDigest?: string;\n    /**\n     * The sub DAG index of the consensus commit. This field is populated if there\n     * are multiple consensus commits per round.\n     *\n     * Present in V3, V4.\n     *\n     * @generated from protobuf field: optional uint64 sub_dag_index = 5;\n     */\n    subDagIndex?: bigint;\n    /**\n     * Stores consensus handler determined consensus object version assignments.\n     *\n     * Present in V3, V4.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.ConsensusDeterminedVersionAssignments consensus_determined_version_assignments = 6;\n     */\n    consensusDeterminedVersionAssignments?: ConsensusDeterminedVersionAssignments;\n    /**\n     * Digest of any additional state computed by the consensus handler.\n     * Used to detect forking bugs as early as possible.\n     *\n     * Present in V4.\n     *\n     * @generated from protobuf field: optional string additional_state_digest = 7;\n     */\n    additionalStateDigest?: string;\n}\n/**\n * Object version assignment from consensus.\n *\n * @generated from protobuf message sui.rpc.v2.VersionAssignment\n */\nexport interface VersionAssignment {\n    /**\n     * `ObjectId` of the object.\n     *\n     * @generated from protobuf field: optional string object_id = 1;\n     */\n    objectId?: string;\n    /**\n     * start version of the consensus stream for this object\n     *\n     * @generated from protobuf field: optional uint64 start_version = 2;\n     */\n    startVersion?: bigint;\n    /**\n     * Assigned version.\n     *\n     * @generated from protobuf field: optional uint64 version = 3;\n     */\n    version?: bigint;\n}\n/**\n * A transaction that was canceled.\n *\n * @generated from protobuf message sui.rpc.v2.CanceledTransaction\n */\nexport interface CanceledTransaction {\n    /**\n     * Digest of the canceled transaction.\n     *\n     * @generated from protobuf field: optional string digest = 1;\n     */\n    digest?: string;\n    /**\n     * List of object version assignments.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.VersionAssignment version_assignments = 2;\n     */\n    versionAssignments: VersionAssignment[];\n}\n/**\n * Version assignments performed by consensus.\n *\n * @generated from protobuf message sui.rpc.v2.ConsensusDeterminedVersionAssignments\n */\nexport interface ConsensusDeterminedVersionAssignments {\n    /**\n     * Version of this message\n     *\n     * @generated from protobuf field: optional int32 version = 1;\n     */\n    version?: number;\n    /**\n     * Canceled transaction version assignment.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.CanceledTransaction canceled_transactions = 3;\n     */\n    canceledTransactions: CanceledTransaction[];\n}\n/**\n * Update the set of valid JWKs.\n *\n * @generated from protobuf message sui.rpc.v2.AuthenticatorStateUpdate\n */\nexport interface AuthenticatorStateUpdate {\n    /**\n     * Epoch of the authenticator state update transaction.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 1;\n     */\n    epoch?: bigint;\n    /**\n     * Consensus round of the authenticator state update.\n     *\n     * @generated from protobuf field: optional uint64 round = 2;\n     */\n    round?: bigint;\n    /**\n     * Newly active JWKs.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ActiveJwk new_active_jwks = 3;\n     */\n    newActiveJwks: ActiveJwk[];\n    /**\n     * The initial version of the authenticator object that it was shared at.\n     *\n     * @generated from protobuf field: optional uint64 authenticator_object_initial_shared_version = 4;\n     */\n    authenticatorObjectInitialSharedVersion?: bigint;\n}\n/**\n * A new JWK.\n *\n * @generated from protobuf message sui.rpc.v2.ActiveJwk\n */\nexport interface ActiveJwk {\n    /**\n     * Identifier used to uniquely identify a JWK.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.JwkId id = 1;\n     */\n    id?: JwkId;\n    /**\n     * The JWK.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Jwk jwk = 2;\n     */\n    jwk?: Jwk;\n    /**\n     * Most recent epoch in which the JWK was validated.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 3;\n     */\n    epoch?: bigint;\n}\n/**\n * Set of operations run at the end of the epoch to close out the current epoch\n * and start the next one.\n *\n * @generated from protobuf message sui.rpc.v2.EndOfEpochTransaction\n */\nexport interface EndOfEpochTransaction {\n    /**\n     * @generated from protobuf field: repeated sui.rpc.v2.EndOfEpochTransactionKind transactions = 1;\n     */\n    transactions: EndOfEpochTransactionKind[];\n}\n/**\n * Operation run at the end of an epoch.\n *\n * @generated from protobuf message sui.rpc.v2.EndOfEpochTransactionKind\n */\nexport interface EndOfEpochTransactionKind {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.EndOfEpochTransactionKind.Kind kind = 1;\n     */\n    kind?: EndOfEpochTransactionKind_Kind;\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"changeEpoch\";\n        /**\n         * End the epoch and start the next one.\n         *\n         * @generated from protobuf field: sui.rpc.v2.ChangeEpoch change_epoch = 2;\n         */\n        changeEpoch: ChangeEpoch;\n    } | {\n        oneofKind: \"authenticatorStateExpire\";\n        /**\n         * Expire JWKs used for zklogin.\n         *\n         * @generated from protobuf field: sui.rpc.v2.AuthenticatorStateExpire authenticator_state_expire = 3;\n         */\n        authenticatorStateExpire: AuthenticatorStateExpire;\n    } | {\n        oneofKind: \"executionTimeObservations\";\n        /**\n         * Execution time observations from the committee to preserve cross epoch\n         *\n         * @generated from protobuf field: sui.rpc.v2.ExecutionTimeObservations execution_time_observations = 4;\n         */\n        executionTimeObservations: ExecutionTimeObservations;\n    } | {\n        oneofKind: \"bridgeChainId\";\n        /**\n         * ChainId used when initializing the bridge\n         *\n         * @generated from protobuf field: string bridge_chain_id = 5;\n         */\n        bridgeChainId: string;\n    } | {\n        oneofKind: \"bridgeObjectVersion\";\n        /**\n         * Start version of the Bridge object\n         *\n         * @generated from protobuf field: uint64 bridge_object_version = 6;\n         */\n        bridgeObjectVersion: bigint;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.EndOfEpochTransactionKind.Kind\n */\nexport enum EndOfEpochTransactionKind_Kind {\n    /**\n     * @generated from protobuf enum value: KIND_UNKNOWN = 0;\n     */\n    KIND_UNKNOWN = 0,\n    /**\n     * End the epoch and start the next one.\n     *\n     * @generated from protobuf enum value: CHANGE_EPOCH = 1;\n     */\n    CHANGE_EPOCH = 1,\n    /**\n     * Create and initialize the authenticator object used for zklogin.\n     *\n     * @generated from protobuf enum value: AUTHENTICATOR_STATE_CREATE = 2;\n     */\n    AUTHENTICATOR_STATE_CREATE = 2,\n    /**\n     * Expire JWKs used for zklogin.\n     *\n     * @generated from protobuf enum value: AUTHENTICATOR_STATE_EXPIRE = 3;\n     */\n    AUTHENTICATOR_STATE_EXPIRE = 3,\n    /**\n     * Create and initialize the randomness object.\n     *\n     * @generated from protobuf enum value: RANDOMNESS_STATE_CREATE = 4;\n     */\n    RANDOMNESS_STATE_CREATE = 4,\n    /**\n     * Create and initialize the deny list object.\n     *\n     * @generated from protobuf enum value: DENY_LIST_STATE_CREATE = 5;\n     */\n    DENY_LIST_STATE_CREATE = 5,\n    /**\n     * Create and initialize the bridge object.\n     *\n     * @generated from protobuf enum value: BRIDGE_STATE_CREATE = 6;\n     */\n    BRIDGE_STATE_CREATE = 6,\n    /**\n     * Initialize the bridge committee.\n     *\n     * @generated from protobuf enum value: BRIDGE_COMMITTEE_INIT = 7;\n     */\n    BRIDGE_COMMITTEE_INIT = 7,\n    /**\n     * Execution time observations from the committee to preserve cross epoch\n     *\n     * @generated from protobuf enum value: STORE_EXECUTION_TIME_OBSERVATIONS = 8;\n     */\n    STORE_EXECUTION_TIME_OBSERVATIONS = 8,\n    /**\n     * Create the accumulator root object.\n     *\n     * @generated from protobuf enum value: ACCUMULATOR_ROOT_CREATE = 9;\n     */\n    ACCUMULATOR_ROOT_CREATE = 9,\n    /**\n     * Create and initialize the Coin Registry object.\n     *\n     * @generated from protobuf enum value: COIN_REGISTRY_CREATE = 10;\n     */\n    COIN_REGISTRY_CREATE = 10,\n    /**\n     * Create and initialize the Display Registry object.\n     *\n     * @generated from protobuf enum value: DISPLAY_REGISTRY_CREATE = 11;\n     */\n    DISPLAY_REGISTRY_CREATE = 11\n}\n/**\n * Expire old JWKs.\n *\n * @generated from protobuf message sui.rpc.v2.AuthenticatorStateExpire\n */\nexport interface AuthenticatorStateExpire {\n    /**\n     * Expire JWKs that have a lower epoch than this.\n     *\n     * @generated from protobuf field: optional uint64 min_epoch = 1;\n     */\n    minEpoch?: bigint;\n    /**\n     * The initial version of the authenticator object that it was shared at.\n     *\n     * @generated from protobuf field: optional uint64 authenticator_object_initial_shared_version = 2;\n     */\n    authenticatorObjectInitialSharedVersion?: bigint;\n}\n/**\n * @generated from protobuf message sui.rpc.v2.ExecutionTimeObservations\n */\nexport interface ExecutionTimeObservations {\n    /**\n     * Version of this ExecutionTimeObservations\n     *\n     * @generated from protobuf field: optional int32 version = 1;\n     */\n    version?: number;\n    /**\n     * @generated from protobuf field: repeated sui.rpc.v2.ExecutionTimeObservation observations = 2;\n     */\n    observations: ExecutionTimeObservation[];\n}\n/**\n * @generated from protobuf message sui.rpc.v2.ExecutionTimeObservation\n */\nexport interface ExecutionTimeObservation {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.ExecutionTimeObservation.ExecutionTimeObservationKind kind = 1;\n     */\n    kind?: ExecutionTimeObservation_ExecutionTimeObservationKind;\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.MoveCall move_entry_point = 2;\n     */\n    moveEntryPoint?: MoveCall;\n    /**\n     * @generated from protobuf field: repeated sui.rpc.v2.ValidatorExecutionTimeObservation validator_observations = 3;\n     */\n    validatorObservations: ValidatorExecutionTimeObservation[];\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.ExecutionTimeObservation.ExecutionTimeObservationKind\n */\nexport enum ExecutionTimeObservation_ExecutionTimeObservationKind {\n    /**\n     * @generated from protobuf enum value: EXECUTION_TIME_OBSERVATION_KIND_UNKNOWN = 0;\n     */\n    EXECUTION_TIME_OBSERVATION_KIND_UNKNOWN = 0,\n    /**\n     * @generated from protobuf enum value: MOVE_ENTRY_POINT = 1;\n     */\n    MOVE_ENTRY_POINT = 1,\n    /**\n     * @generated from protobuf enum value: TRANSFER_OBJECTS = 2;\n     */\n    TRANSFER_OBJECTS = 2,\n    /**\n     * @generated from protobuf enum value: SPLIT_COINS = 3;\n     */\n    SPLIT_COINS = 3,\n    /**\n     * @generated from protobuf enum value: MERGE_COINS = 4;\n     */\n    MERGE_COINS = 4,\n    /**\n     * @generated from protobuf enum value: PUBLISH = 5;\n     */\n    PUBLISH = 5,\n    /**\n     * @generated from protobuf enum value: MAKE_MOVE_VECTOR = 6;\n     */\n    MAKE_MOVE_VECTOR = 6,\n    /**\n     * @generated from protobuf enum value: UPGRADE = 7;\n     */\n    UPGRADE = 7\n}\n/**\n * @generated from protobuf message sui.rpc.v2.ValidatorExecutionTimeObservation\n */\nexport interface ValidatorExecutionTimeObservation {\n    /**\n     * Bls12381 public key of the validator\n     *\n     * @generated from protobuf field: optional bytes validator = 1;\n     */\n    validator?: Uint8Array;\n    /**\n     * Duration of an execution observation\n     *\n     * @generated from protobuf field: optional google.protobuf.Duration duration = 2;\n     */\n    duration?: Duration;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Transaction$Type extends MessageType<Transaction> {\n    constructor() {\n        super(\"sui.rpc.v2.Transaction\", [\n            { no: 1, name: \"bcs\", kind: \"message\", T: () => Bcs },\n            { no: 2, name: \"digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"version\", kind: \"scalar\", opt: true, T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"kind\", kind: \"message\", T: () => TransactionKind },\n            { no: 5, name: \"sender\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"gas_payment\", kind: \"message\", T: () => GasPayment },\n            { no: 7, name: \"expiration\", kind: \"message\", T: () => TransactionExpiration }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Transaction\n */\nexport const Transaction = new Transaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GasPayment$Type extends MessageType<GasPayment> {\n    constructor() {\n        super(\"sui.rpc.v2.GasPayment\", [\n            { no: 1, name: \"objects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ObjectReference },\n            { no: 2, name: \"owner\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"price\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"budget\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.GasPayment\n */\nexport const GasPayment = new GasPayment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionExpiration$Type extends MessageType<TransactionExpiration> {\n    constructor() {\n        super(\"sui.rpc.v2.TransactionExpiration\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.TransactionExpiration.TransactionExpirationKind\", TransactionExpiration_TransactionExpirationKind] },\n            { no: 2, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.TransactionExpiration\n */\nexport const TransactionExpiration = new TransactionExpiration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransactionKind$Type extends MessageType<TransactionKind> {\n    constructor() {\n        super(\"sui.rpc.v2.TransactionKind\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.TransactionKind.Kind\", TransactionKind_Kind] },\n            { no: 2, name: \"programmable_transaction\", kind: \"message\", oneof: \"data\", T: () => ProgrammableTransaction },\n            { no: 3, name: \"change_epoch\", kind: \"message\", oneof: \"data\", T: () => ChangeEpoch },\n            { no: 4, name: \"genesis\", kind: \"message\", oneof: \"data\", T: () => GenesisTransaction },\n            { no: 5, name: \"consensus_commit_prologue\", kind: \"message\", oneof: \"data\", T: () => ConsensusCommitPrologue },\n            { no: 6, name: \"authenticator_state_update\", kind: \"message\", oneof: \"data\", T: () => AuthenticatorStateUpdate },\n            { no: 7, name: \"end_of_epoch\", kind: \"message\", oneof: \"data\", T: () => EndOfEpochTransaction },\n            { no: 8, name: \"randomness_state_update\", kind: \"message\", oneof: \"data\", T: () => RandomnessStateUpdate }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.TransactionKind\n */\nexport const TransactionKind = new TransactionKind$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgrammableTransaction$Type extends MessageType<ProgrammableTransaction> {\n    constructor() {\n        super(\"sui.rpc.v2.ProgrammableTransaction\", [\n            { no: 1, name: \"inputs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Input },\n            { no: 2, name: \"commands\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Command }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ProgrammableTransaction\n */\nexport const ProgrammableTransaction = new ProgrammableTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Command$Type extends MessageType<Command> {\n    constructor() {\n        super(\"sui.rpc.v2.Command\", [\n            { no: 1, name: \"move_call\", kind: \"message\", oneof: \"command\", T: () => MoveCall },\n            { no: 2, name: \"transfer_objects\", kind: \"message\", oneof: \"command\", T: () => TransferObjects },\n            { no: 3, name: \"split_coins\", kind: \"message\", oneof: \"command\", T: () => SplitCoins },\n            { no: 4, name: \"merge_coins\", kind: \"message\", oneof: \"command\", T: () => MergeCoins },\n            { no: 5, name: \"publish\", kind: \"message\", oneof: \"command\", T: () => Publish },\n            { no: 6, name: \"make_move_vector\", kind: \"message\", oneof: \"command\", T: () => MakeMoveVector },\n            { no: 7, name: \"upgrade\", kind: \"message\", oneof: \"command\", T: () => Upgrade }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Command\n */\nexport const Command = new Command$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MoveCall$Type extends MessageType<MoveCall> {\n    constructor() {\n        super(\"sui.rpc.v2.MoveCall\", [\n            { no: 1, name: \"package\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"module\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"function\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"type_arguments\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"arguments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MoveCall\n */\nexport const MoveCall = new MoveCall$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TransferObjects$Type extends MessageType<TransferObjects> {\n    constructor() {\n        super(\"sui.rpc.v2.TransferObjects\", [\n            { no: 1, name: \"objects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Argument },\n            { no: 2, name: \"address\", kind: \"message\", T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.TransferObjects\n */\nexport const TransferObjects = new TransferObjects$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SplitCoins$Type extends MessageType<SplitCoins> {\n    constructor() {\n        super(\"sui.rpc.v2.SplitCoins\", [\n            { no: 1, name: \"coin\", kind: \"message\", T: () => Argument },\n            { no: 2, name: \"amounts\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SplitCoins\n */\nexport const SplitCoins = new SplitCoins$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MergeCoins$Type extends MessageType<MergeCoins> {\n    constructor() {\n        super(\"sui.rpc.v2.MergeCoins\", [\n            { no: 1, name: \"coin\", kind: \"message\", T: () => Argument },\n            { no: 2, name: \"coins_to_merge\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MergeCoins\n */\nexport const MergeCoins = new MergeCoins$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Publish$Type extends MessageType<Publish> {\n    constructor() {\n        super(\"sui.rpc.v2.Publish\", [\n            { no: 1, name: \"modules\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"dependencies\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Publish\n */\nexport const Publish = new Publish$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MakeMoveVector$Type extends MessageType<MakeMoveVector> {\n    constructor() {\n        super(\"sui.rpc.v2.MakeMoveVector\", [\n            { no: 1, name: \"element_type\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"elements\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.MakeMoveVector\n */\nexport const MakeMoveVector = new MakeMoveVector$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Upgrade$Type extends MessageType<Upgrade> {\n    constructor() {\n        super(\"sui.rpc.v2.Upgrade\", [\n            { no: 1, name: \"modules\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"dependencies\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"package\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"ticket\", kind: \"message\", T: () => Argument }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.Upgrade\n */\nexport const Upgrade = new Upgrade$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RandomnessStateUpdate$Type extends MessageType<RandomnessStateUpdate> {\n    constructor() {\n        super(\"sui.rpc.v2.RandomnessStateUpdate\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"randomness_round\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"random_bytes\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 4, name: \"randomness_object_initial_shared_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.RandomnessStateUpdate\n */\nexport const RandomnessStateUpdate = new RandomnessStateUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangeEpoch$Type extends MessageType<ChangeEpoch> {\n    constructor() {\n        super(\"sui.rpc.v2.ChangeEpoch\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"protocol_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"storage_charge\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"computation_charge\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"storage_rebate\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"non_refundable_storage_fee\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 7, name: \"epoch_start_timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 8, name: \"system_packages\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SystemPackage }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ChangeEpoch\n */\nexport const ChangeEpoch = new ChangeEpoch$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SystemPackage$Type extends MessageType<SystemPackage> {\n    constructor() {\n        super(\"sui.rpc.v2.SystemPackage\", [\n            { no: 1, name: \"version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"modules\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },\n            { no: 3, name: \"dependencies\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.SystemPackage\n */\nexport const SystemPackage = new SystemPackage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GenesisTransaction$Type extends MessageType<GenesisTransaction> {\n    constructor() {\n        super(\"sui.rpc.v2.GenesisTransaction\", [\n            { no: 1, name: \"objects\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Object }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.GenesisTransaction\n */\nexport const GenesisTransaction = new GenesisTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusCommitPrologue$Type extends MessageType<ConsensusCommitPrologue> {\n    constructor() {\n        super(\"sui.rpc.v2.ConsensusCommitPrologue\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"round\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"commit_timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 4, name: \"consensus_commit_digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"sub_dag_index\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"consensus_determined_version_assignments\", kind: \"message\", T: () => ConsensusDeterminedVersionAssignments },\n            { no: 7, name: \"additional_state_digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ConsensusCommitPrologue\n */\nexport const ConsensusCommitPrologue = new ConsensusCommitPrologue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VersionAssignment$Type extends MessageType<VersionAssignment> {\n    constructor() {\n        super(\"sui.rpc.v2.VersionAssignment\", [\n            { no: 1, name: \"object_id\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"start_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.VersionAssignment\n */\nexport const VersionAssignment = new VersionAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CanceledTransaction$Type extends MessageType<CanceledTransaction> {\n    constructor() {\n        super(\"sui.rpc.v2.CanceledTransaction\", [\n            { no: 1, name: \"digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"version_assignments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => VersionAssignment }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CanceledTransaction\n */\nexport const CanceledTransaction = new CanceledTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConsensusDeterminedVersionAssignments$Type extends MessageType<ConsensusDeterminedVersionAssignments> {\n    constructor() {\n        super(\"sui.rpc.v2.ConsensusDeterminedVersionAssignments\", [\n            { no: 1, name: \"version\", kind: \"scalar\", opt: true, T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"canceled_transactions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CanceledTransaction }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ConsensusDeterminedVersionAssignments\n */\nexport const ConsensusDeterminedVersionAssignments = new ConsensusDeterminedVersionAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthenticatorStateUpdate$Type extends MessageType<AuthenticatorStateUpdate> {\n    constructor() {\n        super(\"sui.rpc.v2.AuthenticatorStateUpdate\", [\n            { no: 1, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"round\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"new_active_jwks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActiveJwk },\n            { no: 4, name: \"authenticator_object_initial_shared_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.AuthenticatorStateUpdate\n */\nexport const AuthenticatorStateUpdate = new AuthenticatorStateUpdate$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActiveJwk$Type extends MessageType<ActiveJwk> {\n    constructor() {\n        super(\"sui.rpc.v2.ActiveJwk\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => JwkId },\n            { no: 2, name: \"jwk\", kind: \"message\", T: () => Jwk },\n            { no: 3, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ActiveJwk\n */\nexport const ActiveJwk = new ActiveJwk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochTransaction$Type extends MessageType<EndOfEpochTransaction> {\n    constructor() {\n        super(\"sui.rpc.v2.EndOfEpochTransaction\", [\n            { no: 1, name: \"transactions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => EndOfEpochTransactionKind }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.EndOfEpochTransaction\n */\nexport const EndOfEpochTransaction = new EndOfEpochTransaction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochTransactionKind$Type extends MessageType<EndOfEpochTransactionKind> {\n    constructor() {\n        super(\"sui.rpc.v2.EndOfEpochTransactionKind\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.EndOfEpochTransactionKind.Kind\", EndOfEpochTransactionKind_Kind] },\n            { no: 2, name: \"change_epoch\", kind: \"message\", oneof: \"data\", T: () => ChangeEpoch },\n            { no: 3, name: \"authenticator_state_expire\", kind: \"message\", oneof: \"data\", T: () => AuthenticatorStateExpire },\n            { no: 4, name: \"execution_time_observations\", kind: \"message\", oneof: \"data\", T: () => ExecutionTimeObservations },\n            { no: 5, name: \"bridge_chain_id\", kind: \"scalar\", oneof: \"data\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"bridge_object_version\", kind: \"scalar\", oneof: \"data\", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.EndOfEpochTransactionKind\n */\nexport const EndOfEpochTransactionKind = new EndOfEpochTransactionKind$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuthenticatorStateExpire$Type extends MessageType<AuthenticatorStateExpire> {\n    constructor() {\n        super(\"sui.rpc.v2.AuthenticatorStateExpire\", [\n            { no: 1, name: \"min_epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 2, name: \"authenticator_object_initial_shared_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.AuthenticatorStateExpire\n */\nexport const AuthenticatorStateExpire = new AuthenticatorStateExpire$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionTimeObservations$Type extends MessageType<ExecutionTimeObservations> {\n    constructor() {\n        super(\"sui.rpc.v2.ExecutionTimeObservations\", [\n            { no: 1, name: \"version\", kind: \"scalar\", opt: true, T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"observations\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ExecutionTimeObservation }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ExecutionTimeObservations\n */\nexport const ExecutionTimeObservations = new ExecutionTimeObservations$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ExecutionTimeObservation$Type extends MessageType<ExecutionTimeObservation> {\n    constructor() {\n        super(\"sui.rpc.v2.ExecutionTimeObservation\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.ExecutionTimeObservation.ExecutionTimeObservationKind\", ExecutionTimeObservation_ExecutionTimeObservationKind] },\n            { no: 2, name: \"move_entry_point\", kind: \"message\", T: () => MoveCall },\n            { no: 3, name: \"validator_observations\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorExecutionTimeObservation }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ExecutionTimeObservation\n */\nexport const ExecutionTimeObservation = new ExecutionTimeObservation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ValidatorExecutionTimeObservation$Type extends MessageType<ValidatorExecutionTimeObservation> {\n    constructor() {\n        super(\"sui.rpc.v2.ValidatorExecutionTimeObservation\", [\n            { no: 1, name: \"validator\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ },\n            { no: 2, name: \"duration\", kind: \"message\", T: () => Duration }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.ValidatorExecutionTimeObservation\n */\nexport const ValidatorExecutionTimeObservation = new ValidatorExecutionTimeObservation$Type();\n"],
  "mappings": "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",
  "names": ["TransactionExpiration_TransactionExpirationKind", "TransactionKind_Kind", "EndOfEpochTransactionKind_Kind", "ExecutionTimeObservation_ExecutionTimeObservationKind"]
}
