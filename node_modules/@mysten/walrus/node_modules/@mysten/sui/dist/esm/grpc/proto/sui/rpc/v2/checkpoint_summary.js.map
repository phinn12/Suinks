{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/checkpoint_summary.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/checkpoint_summary.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ValidatorCommitteeMember } from \"./signature\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\nimport { GasCostSummary } from \"./gas_cost_summary\";\nimport { Bcs } from \"./bcs\";\n/**\n * A header for a checkpoint on the Sui blockchain.\n *\n * On the Sui network, checkpoints define the history of the blockchain. They are quite similar to\n * the concept of blocks used by other blockchains like Bitcoin or Ethereum. The Sui blockchain,\n * however, forms checkpoints after transaction execution has already happened to provide a\n * certified history of the chain, instead of being formed before execution.\n *\n * Checkpoints commit to a variety of state, including but not limited to:\n * - The hash of the previous checkpoint.\n * - The set of transaction digests, their corresponding effects digests, as well as the set of\n *   user signatures that authorized its execution.\n * - The objects produced by a transaction.\n * - The set of live objects that make up the current state of the chain.\n * - On epoch transitions, the next validator committee.\n *\n * `CheckpointSummary`s themselves don't directly include all of the previous information but they\n * are the top-level type by which all the information is committed to transitively via cryptographic\n * hashes included in the summary. `CheckpointSummary`s are signed and certified by a quorum of\n * the validator committee in a given epoch to allow verification of the chain's state.\n *\n * @generated from protobuf message sui.rpc.v2.CheckpointSummary\n */\nexport interface CheckpointSummary {\n    /**\n     * This CheckpointSummary serialized as BCS.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.Bcs bcs = 1;\n     */\n    bcs?: Bcs;\n    /**\n     * The digest of this CheckpointSummary.\n     *\n     * @generated from protobuf field: optional string digest = 2;\n     */\n    digest?: string;\n    /**\n     * Epoch that this checkpoint belongs to.\n     *\n     * @generated from protobuf field: optional uint64 epoch = 3;\n     */\n    epoch?: bigint;\n    /**\n     * The height of this checkpoint.\n     *\n     * @generated from protobuf field: optional uint64 sequence_number = 4;\n     */\n    sequenceNumber?: bigint;\n    /**\n     * Total number of transactions committed since genesis, including those in this\n     * checkpoint.\n     *\n     * @generated from protobuf field: optional uint64 total_network_transactions = 5;\n     */\n    totalNetworkTransactions?: bigint;\n    /**\n     * The hash of the `CheckpointContents` for this checkpoint.\n     *\n     * @generated from protobuf field: optional string content_digest = 6;\n     */\n    contentDigest?: string;\n    /**\n     * The hash of the previous `CheckpointSummary`.\n     *\n     * This will be `None` only for the first, or genesis, checkpoint.\n     *\n     * @generated from protobuf field: optional string previous_digest = 7;\n     */\n    previousDigest?: string;\n    /**\n     * The running total gas costs of all transactions included in the current epoch so far\n     * until this checkpoint.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.GasCostSummary epoch_rolling_gas_cost_summary = 8;\n     */\n    epochRollingGasCostSummary?: GasCostSummary;\n    /**\n     * Timestamp of the checkpoint - number of milliseconds from the Unix epoch\n     * Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent\n     * checkpoints can have the same timestamp if they originate from the same underlining consensus commit.\n     *\n     * @generated from protobuf field: optional google.protobuf.Timestamp timestamp = 9;\n     */\n    timestamp?: Timestamp;\n    /**\n     * Commitments to checkpoint-specific state.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.CheckpointCommitment commitments = 10;\n     */\n    commitments: CheckpointCommitment[];\n    /**\n     * Extra data only present in the final checkpoint of an epoch.\n     *\n     * @generated from protobuf field: optional sui.rpc.v2.EndOfEpochData end_of_epoch_data = 11;\n     */\n    endOfEpochData?: EndOfEpochData;\n    /**\n     * `CheckpointSummary` is not an evolvable structure - it must be readable by any version of\n     * the code. Therefore, to allow extensions to be added to `CheckpointSummary`,\n     * opaque data can be added to checkpoints, which can be deserialized based on the current\n     * protocol version.\n     *\n     * @generated from protobuf field: optional bytes version_specific_data = 12;\n     */\n    versionSpecificData?: Uint8Array;\n}\n/**\n * Data, which when included in a `CheckpointSummary`, signals the end of an `Epoch`.\n *\n * @generated from protobuf message sui.rpc.v2.EndOfEpochData\n */\nexport interface EndOfEpochData {\n    /**\n     * The set of validators that will be in the `ValidatorCommittee` for the next epoch.\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.ValidatorCommitteeMember next_epoch_committee = 1;\n     */\n    nextEpochCommittee: ValidatorCommitteeMember[];\n    /**\n     * The protocol version that is in effect during the next epoch.\n     *\n     * @generated from protobuf field: optional uint64 next_epoch_protocol_version = 2;\n     */\n    nextEpochProtocolVersion?: bigint;\n    /**\n     * Commitments to epoch specific state (live object set)\n     *\n     * @generated from protobuf field: repeated sui.rpc.v2.CheckpointCommitment epoch_commitments = 3;\n     */\n    epochCommitments: CheckpointCommitment[];\n}\n/**\n * A commitment made by a checkpoint.\n *\n * @generated from protobuf message sui.rpc.v2.CheckpointCommitment\n */\nexport interface CheckpointCommitment {\n    /**\n     * @generated from protobuf field: optional sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind kind = 1;\n     */\n    kind?: CheckpointCommitment_CheckpointCommitmentKind;\n    /**\n     * @generated from protobuf field: optional string digest = 2;\n     */\n    digest?: string;\n}\n/**\n * @generated from protobuf enum sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind\n */\nexport enum CheckpointCommitment_CheckpointCommitmentKind {\n    /**\n     * @generated from protobuf enum value: CHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0;\n     */\n    CHECKPOINT_COMMITMENT_KIND_UNKNOWN = 0,\n    /**\n     * An elliptic curve multiset hash attesting to the set of objects that\n     * comprise the live state of the Sui blockchain.\n     *\n     * @generated from protobuf enum value: ECMH_LIVE_OBJECT_SET = 1;\n     */\n    ECMH_LIVE_OBJECT_SET = 1,\n    /**\n     * Digest of the checkpoint artifacts.\n     *\n     * @generated from protobuf enum value: CHECKPOINT_ARTIFACTS = 2;\n     */\n    CHECKPOINT_ARTIFACTS = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointSummary$Type extends MessageType<CheckpointSummary> {\n    constructor() {\n        super(\"sui.rpc.v2.CheckpointSummary\", [\n            { no: 1, name: \"bcs\", kind: \"message\", T: () => Bcs },\n            { no: 2, name: \"digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"epoch\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"sequence_number\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 5, name: \"total_network_transactions\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"content_digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 7, name: \"previous_digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ },\n            { no: 8, name: \"epoch_rolling_gas_cost_summary\", kind: \"message\", T: () => GasCostSummary },\n            { no: 9, name: \"timestamp\", kind: \"message\", T: () => Timestamp },\n            { no: 10, name: \"commitments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CheckpointCommitment },\n            { no: 11, name: \"end_of_epoch_data\", kind: \"message\", T: () => EndOfEpochData },\n            { no: 12, name: \"version_specific_data\", kind: \"scalar\", opt: true, T: 12 /*ScalarType.BYTES*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CheckpointSummary\n */\nexport const CheckpointSummary = new CheckpointSummary$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EndOfEpochData$Type extends MessageType<EndOfEpochData> {\n    constructor() {\n        super(\"sui.rpc.v2.EndOfEpochData\", [\n            { no: 1, name: \"next_epoch_committee\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorCommitteeMember },\n            { no: 2, name: \"next_epoch_protocol_version\", kind: \"scalar\", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"epoch_commitments\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CheckpointCommitment }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.EndOfEpochData\n */\nexport const EndOfEpochData = new EndOfEpochData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CheckpointCommitment$Type extends MessageType<CheckpointCommitment> {\n    constructor() {\n        super(\"sui.rpc.v2.CheckpointCommitment\", [\n            { no: 1, name: \"kind\", kind: \"enum\", opt: true, T: () => [\"sui.rpc.v2.CheckpointCommitment.CheckpointCommitmentKind\", CheckpointCommitment_CheckpointCommitmentKind] },\n            { no: 2, name: \"digest\", kind: \"scalar\", opt: true, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message sui.rpc.v2.CheckpointCommitment\n */\nexport const CheckpointCommitment = new CheckpointCommitment$Type();\n"],
  "mappings": "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",
  "names": ["CheckpointCommitment_CheckpointCommitmentKind"]
}
