{
  "version": 3,
  "sources": ["../../../../../../../src/grpc/proto/sui/rpc/v2/subscription_service.client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// @generated by protobuf-ts 2.9.6 with parameter force_server_none,optimize_code_size,ts_nocheck\n// @generated from protobuf file \"sui/rpc/v2/subscription_service.proto\" (package \"sui.rpc.v2\", syntax proto3)\n// tslint:disable\n// @ts-nocheck\n//\n// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n//\nimport type { RpcTransport } from \"@protobuf-ts/runtime-rpc\";\nimport type { ServiceInfo } from \"@protobuf-ts/runtime-rpc\";\nimport { SubscriptionService } from \"./subscription_service\";\nimport { stackIntercept } from \"@protobuf-ts/runtime-rpc\";\nimport type { SubscribeCheckpointsResponse } from \"./subscription_service\";\nimport type { SubscribeCheckpointsRequest } from \"./subscription_service\";\nimport type { ServerStreamingCall } from \"@protobuf-ts/runtime-rpc\";\nimport type { RpcOptions } from \"@protobuf-ts/runtime-rpc\";\n/**\n * @generated from protobuf service sui.rpc.v2.SubscriptionService\n */\nexport interface ISubscriptionServiceClient {\n    /**\n     * Subscribe to the stream of checkpoints.\n     *\n     * This API provides a subscription to the checkpoint stream for the Sui\n     * blockchain. When a subscription is initialized the stream will begin with\n     * the latest executed checkpoint as seen by the server. Responses are\n     * guaranteed to return checkpoints in-order and without gaps. This enables\n     * clients to know exactly the last checkpoint they have processed and in the\n     * event the subscription terminates (either by the client/server or by the\n     * connection breaking), clients will be able to reinitialize a subscription\n     * and then leverage other APIs in order to request data for the checkpoints\n     * they missed.\n     *\n     * @generated from protobuf rpc: SubscribeCheckpoints(sui.rpc.v2.SubscribeCheckpointsRequest) returns (stream sui.rpc.v2.SubscribeCheckpointsResponse);\n     */\n    subscribeCheckpoints(input: SubscribeCheckpointsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse>;\n}\n/**\n * @generated from protobuf service sui.rpc.v2.SubscriptionService\n */\nexport class SubscriptionServiceClient implements ISubscriptionServiceClient, ServiceInfo {\n    typeName = SubscriptionService.typeName;\n    methods = SubscriptionService.methods;\n    options = SubscriptionService.options;\n    constructor(private readonly _transport: RpcTransport) {\n    }\n    /**\n     * Subscribe to the stream of checkpoints.\n     *\n     * This API provides a subscription to the checkpoint stream for the Sui\n     * blockchain. When a subscription is initialized the stream will begin with\n     * the latest executed checkpoint as seen by the server. Responses are\n     * guaranteed to return checkpoints in-order and without gaps. This enables\n     * clients to know exactly the last checkpoint they have processed and in the\n     * event the subscription terminates (either by the client/server or by the\n     * connection breaking), clients will be able to reinitialize a subscription\n     * and then leverage other APIs in order to request data for the checkpoints\n     * they missed.\n     *\n     * @generated from protobuf rpc: SubscribeCheckpoints(sui.rpc.v2.SubscribeCheckpointsRequest) returns (stream sui.rpc.v2.SubscribeCheckpointsResponse);\n     */\n    subscribeCheckpoints(input: SubscribeCheckpointsRequest, options?: RpcOptions): ServerStreamingCall<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse> {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return stackIntercept<SubscribeCheckpointsRequest, SubscribeCheckpointsResponse>(\"serverStreaming\", this._transport, method, opt, input);\n    }\n}\n"],
  "mappings": "AAaA,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AA6BxB,MAAM,0BAA6E;AAAA,EAItF,YAA6B,YAA0B;AAA1B;AAH7B,oBAAW,oBAAoB;AAC/B,mBAAU,oBAAoB;AAC9B,mBAAU,oBAAoB;AAAA,EAE9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,qBAAqB,OAAoC,SAAsG;AAC3J,UAAM,SAAS,KAAK,QAAQ,CAAC,GAAG,MAAM,KAAK,WAAW,aAAa,OAAO;AAC1E,WAAO,eAA0E,mBAAmB,KAAK,YAAY,QAAQ,KAAK,KAAK;AAAA,EAC3I;AACJ;",
  "names": []
}
